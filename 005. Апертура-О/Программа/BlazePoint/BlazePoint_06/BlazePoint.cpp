// головной файл проекта
//---------------------------------------------------------------------------
// директивы препроцессора #include подключают в данный файл тексты указанных в них файлов
#include <vcl.h>  // объявления, используемые в библиотеке визуальных компонентов С++Builder
#pragma hdrstop   // конец списка общих заголовочных файлов для всех модулей проекта

#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <io.h>
/* Макросы, подключающие файлы ресурсов и форм. Препроцессор развернёт эти макросы в соответствующий код.
Первый параметр макроса содержит имя файла модуля, соответствующего форме, а второй параметр - имя формы. */
//---------------------------------------------------------------------------
USEFORM("Help.cpp", F_Help);
USEFORM("AboutBox.cpp", F_AboutBox);
USEFORM("Error.cpp", ErrorForm);
USEFORM("BlazePoint_main.cpp", Main_Form);
//---------------------------------------------------------------------------
WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, int)
/* Первый параметр функции WinMain - дескриптор данного экземпляра приложения.
Дескриптор - это некий уникальный указатель, позволяющий Windows разбираться в множестве одновременно
открытых окон различных приложений.
Второй параметр - дескриптор предыдущего экземпляра приложения (если пользователь выполняет одновременно
несколько таких приложений).
Третий параметр - указатель на строку с нулевым символом в конце, содержащую параметры, передаваемые в
программу через командную строку.
Последний параметр определяет окно приложения. */
{
  try
  {
     Application->Initialize();  // инициализация объектов компонентов данного приложения
     Application->Title = "BlazePoint";
		Application->CreateForm(__classid(TMain_Form), &Main_Form);
		Application->CreateForm(__classid(TF_AboutBox), &F_AboutBox);
		Application->CreateForm(__classid(TErrorForm), &ErrorForm);
		Application->CreateForm(__classid(TF_Help), &F_Help);
		Application->Run();                                         // начало собственно выполнения программы
  }
  catch (Exception &exception)   // обработка исключений - аварийных ситуаций при работе программы
  {
     Application->ShowException(&exception);  // стандартный обработчик исключений
  }
  catch (...)
  {
     try
     {
       throw Exception("");
     }
     catch (Exception &exception)
     {
       Application->ShowException(&exception);
     }
  }
  return 0;
}
//---------------------------------------------------------------------------
