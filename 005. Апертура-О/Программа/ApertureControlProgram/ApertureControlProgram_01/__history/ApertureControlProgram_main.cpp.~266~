//---------------------------------------------------------------------------
// директивы препроцессора #include подключают в данный файл тексты указанных в них файлов
#include <vcl.h>  // объявления, используемые в библиотеке визуальных компонентов С++Builder
#pragma hdrstop   // конец списка общих заголовочных файлов для всех модулей проекта

#include "ApertureControlProgram_main.h"
#include "SelfControl.h"
#include "AboutBox.h"
#include "Help.h"
#include "Error.h"
/*
iostream — заголовочный файл с классами, функциями и переменными для организации ввода-вывода
в языке программирования C++. Он включён в стандартную библиотеку C++. Название образовано от
Input/Output Stream («поток ввода-вывода»). В языке C++ и его предшественнике, языке
программирования Си, нет встроенной поддержки ввода-вывода, вместо этого используется библиотека
функций. iostream управляет вводом-выводом, как и stdio.h в Си. iostream использует объекты cin,
cout, cerr и clog для передачи информации в и из стандартных потоков ввода, вывода, ошибок
(без буферизации) и ошибок (с буферизацией) соответственно. Являясь частью стандартной
библиотеки C++, эти объекты также являются частью стандартного пространства имён — std.
*/
#include <iostream>
#include <fstream>               // Файловые операции ввода-вывода
#include <cmath>
#include <math.h>
#include "NIDAQmx.h"
#include <Registry.hpp>
using namespace std;

#define NUMBEROFPOINTS 64

//  Константные определения ошибок
const int NotInBorders=0;
const int NotFloat=1;
const int NotInt=2;
const int FileNotExist=3;

// Глобальные переменные таймеров
static int sec=0;
int NIDAQmxCounter=-1;
int TempPowerCounter=-1;

// Переменные обмена по DAQmx
unsigned char P0[8],P1[4];       // буфер обмена для цифровых портов
const int NumReadValue=10;
bool ErrorADC;

// Переменные цветовой индикации
TColor DefaultColor=clSilver;    // clBtnFace
TColor GoodColor=clLime;
TColor BadColor=clRed;

// Переменные для расчета времени задержки и доплеровского смещения
const float pi=3.141592;
const float c=3*100000000;
int Fi=0;                        // значение направления полёта
int X=0;                         // значение координаты БТ по оси X
int Y=0;                         // значение координаты БТ по оси Y
int D=0;                         // расстояние до цели [м]
int V=0;                         // скорость полёта РСА [м/с]
int f=0;                         // несущая частота [МГц]

// Переменные индексов
int OldIndex;                    // для режима Управление
int OldIndex_;                   // для режима Тестирование

float value;

// Переменные усреднения
float Buff0[10];                 // очередь замеров
unsigned char N_zamera0=0;       // номер замера
float sum0;                      // 0..0x0ffffffff

float Buff1[10];                 // очередь замеров
unsigned char N_zamera1=0;       // номер замера
float sum1;                      // 0..0x0ffffffff

float Buff2[10];                 // очередь замеров
unsigned char N_zamera2=0;       // номер замера
float sum2;                      // 0..0x0ffffffff

float Buff3[10];                 // очередь замеров
unsigned char N_zamera3=0;       // номер замера
float sum3;                      // 0..0x0ffffffff

float Buff4[10];                 // очередь замеров
unsigned char N_zamera4=0;       // номер замера
float sum4;                      // 0..0x0ffffffff

float Buff5[10];                 // очередь замеров
unsigned char N_zamera5=0;       // номер замера
float sum5;                      // 0..0x0ffffffff

double k2=0.487, k3=0.529, k4=0.56, k5=1.42, k6=1.608;

String FileControl="";
String FileTesting="";

// Массивы для сохранения параметров Ложной Цели
int XString[NUMBEROFPOINTS];
int YString[NUMBEROFPOINTS];
int EPRString[NUMBEROFPOINTS];

int delay_ms;

/*
 Протокол обмена информацией между устройством управления (УУ)
 и платой ЦПС блока ФРЛП по интерфейсу RS-232 от 28.02.14.
*/
int Command3[NUMBEROFPOINTS][4];
int Shift[4]={3, 255, 0, 0};     // команда "Сдвиг разрядов"
int Command4[NUMBEROFPOINTS][4];
int Command5[NUMBEROFPOINTS][4];
int D_SignC[NUMBEROFPOINTS];     // знак доплеровского смещения БТ
int Command6[4]={6, 0, 0, 0};
int Command7[4]={7, 0, 0, 63};

int Com3[NUMBEROFPOINTS][4];
int Shift_[4]={227, 255, 0, 0};  // команда "Сдвиг разрядов"
int Com4[NUMBEROFPOINTS][4];
int Com5[NUMBEROFPOINTS][4];
int D_SignT[NUMBEROFPOINTS];     // знак доплеровского смещения БТ
int Com6[4]={230, 0, 0, 31};
int Com7[4]={231, 0, 0, 63};
int Com8[4]={232, 0, 7, 142};
int Com9[4]={233, 0, 7, 142};
int Com10[4]={234, 0, 0, 0};
int Com11[4]={235, 0, 0, 0};

int Com13[4]={237, 0, 0, 200};   // 00, 00, c8
int Com14[4]={238, 0, 201, 128}; // 00, c9, 80
int Com15[4]={239, 0, 8, 194};   // 00, 08, c2
int Com16[4]={240, 78, 0, 0};    // 4e, 00, 00
int Com17[4]={241, 179, 4, 0};   // b3, 04, 00
int Com18[4]={242, 0, 36, 1};    // 00, 24, 01
int Com19[4]={243, 165, 0, 5};   // a5, 00, 05
int Com20[4]={244, 0, 88, 0};    // 00, 58, 00
/*
  Регистры и параметры синтезатора частоты ADF4350 блока ФРЛП,
  входящего в состав изделия.

  Reg[0]=0x00C80000;
  Reg[1]=0x080080C9;
  Reg[2]=0x00004EC2;
  Reg[3]=0x000004B3;
  Reg[4]=0x00A50124;
  Reg[5]=0x00580005;
*/
int Reg[6];

int REFin, R, T;         // Reference frequency input, Reference division factor, Reference divide-by-2 bit
int ChS, Fres;           // Channel Spacing, Channel resolution
float Fpfd;              // PFD frequency, Output Devider
double Fvco, Fout;       // Output frequency, VCO Frequency
double INTE, FRAC, MOD;  // Integer division factor,  Fractionality, Modulus
double N, Phase;         // INT+FRAC/MOD, Phase

int OD;
int Prescaler;
int Counter_Reset;
int Three_State;
int Power_Down;
int Polarity;
int LDP;
int LDF;
int Current_setting;
int Double_Buff;
int MUXout;
int Noise_Mode;
int CLK_DIV;
int CLK_DIV_MODE;
int Cycle_Slip_Reduction;
int RF_Output;
int AUX_Output;
int AUX_Select;
int MTLD;
int VCO_Power_Down;
double BSCD;
double Divider_Select;
int Feedback_Select;
int LD_Pin_Mode;
/*
  Устройство 1 (Приёмник ПРМ):
  NI USB-6008:
  P0.0, P0.1, P0.2, P0.3, P0.4 - запись команды "Затухание аттенюатора приемника" [дБ]
  P0.5 - запись команды "Выбор частотного диапазона 2-й ступени"
  P0.6, P0.7 - запись команды "Выбор частотного диапазона"

  AI0 - чтение напряжения питания источника +5 В приёмника [В]
  AI1 - чтение напряжения питания источника +12 В приёмника [В]
  AI2 - чтение мощности сигнала приёмника [дБм]
  AI4 - чтение напряжения питания источника -5 В приёмника [В]
  AI5 - чтение тока питания источника +27 В приёмника [А]

  Устройство 2 (Передатчик ПРД):
  NI USB-6008:
  P0.0, P0.1, P0.2, P0.3, P0.4 - запись команды "Затухание аттенюатора передатчика" [дБ]
  P0.5 - запись команды "Выбор частотного диапазона 2-й ступени"
  P0.6, P0.7 - запись команды "Выбор частотного диапазона"

  AI0 - чтение напряжения питания источника +5 В передатчика [В]
  AI1 - чтение напряжения питания источника +12 В передатчика [В]
  AI2 - чтение мощности сигнала передатчика [дБм]
  AI4 - чтение напряжения питания источника -5 В передатчика [В]
  AI5 - чтение тока питания источника +27 В передатчика [А]

  Устройство 3 (Вторичный источник питания ВИП):
  NI USB-6008:
  P0.0 - запись команды "Включить +20 В на выносном передатчике"
  P0.1 - запись команды "Включить -8 В на выносном передатчике"
  P0.2 - запись команды "Включить +12 В на выносном передатчике"
  P0.0 - запись команды "Включить +12 В на выносном приёмнике"

  AI0 - чтение напряжения питания источника +12 В [В]
  AI1 - чтение напряжения питания источника +27 В [В]
  AI2 - чтение тока выносного передатчика [А]
  AI4 - чтение напряжения питания источника +5 В [В]
  AI5 - чтение тока выносного приёмника [А]

  Устройство 4 (Устройство управления УУ):
  NI USB-6008:
  AI0 - чтение напряжения питания источника +5 В [В]
  AI1 - чтение выходного напряжения датчика тока [А]
  AI4 - чтение напряжения питания источника +12 В [В]
*/
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma link "CommPort"
#pragma resource "*.dfm"
TMainForm *MainForm;
TIniFile *Ini;
//---------------------------------------------------------------------------
// вызов конструктора формы MainForm
__fastcall TMainForm::TMainForm(TComponent* Owner)
	: TForm(Owner)
{
/*
  ExtractFilePath(Application->ExeName) - путь к исполнимому файлу.
  GetCurrentDir() - путь к текущей директории.
  Они не обязаны совпадать, текущий каталог величина не постоянная,
  зависит  от способа запуска проги и может меняться в процессе.
*/
  My_Patch = ExtractFilePath(Application->ExeName); // путь к исполнимому файлу

  if(!DirectoryExists(My_Patch + "log файлы"))
  {
    if(!CreateDir(My_Patch + "log файлы"))
      ShowMessage("Не удается создать директорию хранения log файлов!");
    else
      ShowMessage("Создана директория для хранения log файлов!");
  }

  if(!DirectoryExists(My_Patch + "Файлы результатов в режиме Работа"))
  {
	if(!CreateDir(My_Patch + "Файлы результатов в режиме Работа"))
	  ShowMessage("Не удается создать директорию хранения файлов результатов в режиме Работа!");
    else
      ShowMessage("Создана директория для хранения файлов результатов в режиме Работа!");
  }
/*
  extern PACKAGE bool __fastcall DirectoryExists(const System::UnicodeString Directory, bool FollowLink = true);
  Функция DirectoryExists возвращает True, если данный DirectoryName файл существует.
  Каталог разыскивается в текущем каталоге. False может быть возвращена, если пользователю не
  разрешено видеть файл.

  extern PACKAGE bool __fastcall CreateDir(const System::UnicodeString Dir);
  Функция CreateDir создаёт папку в текущей директории.
  Если папка была создана, то функция вернёт True.
*/
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::Button1Click(TObject *Sender)
{
  F_SelfControl->ShowModal();
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::B_AvailableComClick(TObject *Sender)
{
  SearchCOMPorts();
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::SearchCOMPorts(void)
{
  TRegistry *reg = new TRegistry;
  TStringList *list = new TStringList;
  reg->RootKey = HKEY_LOCAL_MACHINE;
  reg->OpenKey("HARDWARE\\DEVICEMAP\\SERIALCOMM", false);
  reg->GetValueNames(list);
  for(int i = 0; i < list->Count; i++)
  list->Strings[i] = reg->ReadString( list->Strings[i]);
  list->Sort();
  LB_AvailableCom->Clear();
  LB_AvailableCom->Items->AddStrings(list);
  delete list;
  delete reg;
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::TB_AboutClick(TObject *Sender)
{
  AddSaveLog("Информация о программе, номере версии и правах");  // добавить комментарий и сохранить лог
  F_AboutBox->ShowModal();
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::HelpAboutProgClick(TObject *Sender)
{
  F_Help->ShowModal();
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::AddSaveLog(String comment) // добавить комментарий и сохранить лог
{
  My_Patch = ExtractFilePath(Application->ExeName);   // путь к исполнимому файлу

  if(!DirectoryExists(My_Patch + "log файлы"))
  {
    if(!CreateDir(My_Patch + "log файлы"))
      ShowMessage("Не удается создать директорию хранения log файлов!");
    else
      ShowMessage("Создана директория для хранения log файлов!");
  }
/*
  Now()- Системная дата и время – значение типа TDateTime;
  DateTimeToStr(Now()) - Строка символов, изображающая дату в формате dd.mm.yyyy и время формате hh:mm:ss
*/
  M_Log->Lines->Add(DateTimeToStr(Now())+" "+comment); // добавить запись в лог с текущим временем
/*
  ExtractFilePath(Application->ExeName) - путь к исполнимому файлу.
  GetCurrentDir() - путь к текущей директории.
  Они не обязаны совпадать, текущий каталог величина не постоянная,
  зависит от способа запуска проги и может меняться в процессе.
*/
  M_Log->Lines->SaveToFile(My_Patch+"\\log файлы\\"+logFname+".log"); // запись лог файла
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::FormCreate(TObject *Sender)
{
/*
  FormatDateTime (s, dt) - Строка символов, представляющая собой дату или время. Способ представления
  задает строка формата s, например, строка dd/mm/yyyy задает, что значением функции является дата,
  а строка hh:mm – время
*/
  P_SystemTime->Caption = FormatDateTime("YYYY.MM.DD",Date())+"_"+FormatDateTime("HH-NN-SS",Time()); // текущая дата и время
  logFname = P_SystemTime->Caption; // запись имени лог файла в буфер при открытии программы
  AddSaveLog("Программа запущена"); // добавить комментарий и сохранить лог
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::FormClose(TObject *Sender, TCloseAction &Action)
{
  AddSaveLog("Программа закрыта"); // добавить комментарий и сохранить лог
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::B_EnterClick(TObject *Sender)
{
  if(E_EnterComment->Text!="")
  {
    AddSaveLog(E_EnterComment->Text); // запись лог файла
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::ChB_LogClick(TObject *Sender)
{
  if(ChB_Log->Checked==true) M_Log->Visible=false;
  else                       M_Log->Visible=true;
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::WorkTimerTimer(TObject *Sender)
// таймер обновления и вывода рабочего времени каждую 1 с
{
  static int min=0, hour=0; // переменные минут и часов
  sec++;                    // каждые 1000 мс увеличивать значение переменной секунд на 1

  if(sec>59)                // каждые 60 с
  {
    sec=0;                  // обнулять значение секунд
    min++;                  // увеличивать значение переменной минут на 1
  }

  if(min>59)                // каждые 60 минут
  {
    min=0;                  // обнулять значение минут
    hour++;                 // увеличивать значение переменной часов на 1
  }

  // чтобы вывод секунд, минут и часов всегда был с использованием 2-х символов
  if(sec<10)  L_S->Caption="0"+IntToStr(sec);
  else        L_S->Caption=IntToStr(sec);

  if(min<10)  L_M->Caption="0"+IntToStr(min);
  else        L_M->Caption=IntToStr(min);

  if(hour<10) L_H->Caption="0"+IntToStr(hour);
  else        L_H->Caption=IntToStr(hour);

  P_WorkTime->Caption = L_H->Caption+":"+L_M->Caption+":"+L_S->Caption;
  P_WorkTime->Refresh(); // обновить заголовок
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::SB_OnOffClick(TObject *Sender)
{
  try
  {
    if(SB_OnOff->Down)         // если нажата
    {
      SB_OnOff->Caption="Выключить";
      SB_OnOff->Font->Color=clRed;

      WorkTimer->Enabled=true; // включить таймер WorkTimer
	  /*
      if(RG_Mode->ItemIndex==0)
      {
        StartControl();
      }
      else
      {
        StartTesting();
	  } */
    }
    else                       // если не нажата
    {
      SB_OnOff->Caption="Включить";
      SB_OnOff->Font->Color=clGreen;
	  /*
      if(RG_Mode->ItemIndex==0)
      {
        StopControl();
      }
      else
      {
        StopTesting();
	  }   */
/*
      ExtractFilePath(Application->ExeName) - путь к исполнимому файлу.
      GetCurrentDir() - путь к текущей директории.
      Они не обязаны совпадать, текущий каталог величина не постоянная,
      зависит от способа запуска проги и может меняться в процессе.
*/
    }
  }

  catch(...)
  {
    SB_OnOff->Down=false;
    SB_OnOff->Caption="Включить";
	SB_OnOff->Font->Color=clGreen;
	ButtonsOn();
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::ButtonsOn(void)
{
  B_Ready->Enabled=true;
  CB_ComNum->Enabled=true;
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::SystemTimerTimer(TObject *Sender)
// таймер обновления и вывода системного времени каждые 10 мс
{
/*
  FormatDateTime (s, dt) - Строка символов, представляющая собой дату или время. Способ представления
  задает строка формата s, например, строка dd/mm/yyyy задает, что значением функции является дата,
  а строка hh:mm – время
*/
  P_SystemTime->Caption = FormatDateTime("YYYY.MM.DD",Date())+" "+FormatDateTime("HH:NN:SS",Time()); // текущая дата и время
  //P_SystemTime->Caption = Now();
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::ExitClick(TObject *Sender)
{
  Close();
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::FormShow(TObject *Sender)
{
  if (!DirectoryExists(My_Patch + "log файлы"))
  {
	MessageBox(NULL,L"Отсутсвует директория log файлы!",L"Ошибка!",MB_OK|MB_ICONERROR);
    Application->Terminate();
  }
}
//---------------------------------------------------------------------------
bool TMainForm::IsValidInt(int min, int max, String value, String EdIzm)
// проверка правильности диапазона значений целых чисел
{
  int temp;

  try
  {
    temp=StrToInt(value);

    if((temp>max)||(temp<min))
    {
      ShowError(NotInBorders,min,max,EdIzm);
      return false;
    }
  }

  catch(...)
  {
    ShowError(NotInt,0,0,"");
    return false;
  }

  return true;
}
//---------------------------------------------------------------------------
void TMainForm::ShowError(int ErrorNum, float Par1, float Par2, String Par3)
// вывод формы сообщения об ошибке
{
  switch(ErrorNum)
  {
    case NotInBorders:
      ErrorForm->Visible=true;
      ErrorForm->Caption="Ошибка";
      ErrorForm->Panel1->Caption="Ошибка ввода данных. Введенное значение вне допустимого диапазона.";
      ErrorForm->Panel2->Caption="Значение должно лежать в диапазоне от "+ FloatToStrF(Par1,ffGeneral,5,2)+" до "+FloatToStrF(Par2,ffGeneral,5,2)+" "+Par3+".";
      break;

    case NotFloat:
      ErrorForm->Visible=true;
      ErrorForm->Caption="Ошибка";
      ErrorForm->Panel1->Caption="Ошибка ввода данных. Введенное значение не является вещественным.";
      ErrorForm->Panel2->Caption="Необходимо вводить вещественные значения. Например, \"-2,2e+3\".";
      break;

    case NotInt:
      ErrorForm->Visible=true;
      ErrorForm->Caption="Ошибка";
      ErrorForm->Panel1->Caption="Ошибка ввода данных. Введенное значение не является целым.";
      ErrorForm->Panel2->Caption="Необходимо вводить целые значения. Например, \"-25\".";
      break;

    case FileNotExist:
	  ErrorForm->Visible=true;
	  ErrorForm->Caption="Ошибка";
	  ErrorForm->Panel1->Caption="Невозможно загрузить не существующий файл. Для создания нового файла";
	  ErrorForm->Panel2->Caption="воспользуйтесь командами \"Сохранить\" и \"Сохранить как...\".";
	  break;
  }
}
//---------------------------------------------------------------------------
bool __fastcall TMainForm::WriteDigChan(const char *Config, char *DigPort)
// запись из буфера обмена цифрового порта P0 устройства 1
{
	TaskHandle  taskHandle=0;
	char        errBuff[2048]={'\0'};

  // Создаем задачу
  if (DAQmxFailed((DAQmxCreateTask("",&taskHandle))))
  {
    DAQmxGetExtendedErrorInfo(errBuff,2048);
    return false;
  }

  // Определяем параметры задачи
  if (DAQmxFailed((DAQmxCreateDOChan(taskHandle,"Dev1/port0/line0:7","",DAQmx_Val_ChanForAllLines))))
  {
    DAQmxGetExtendedErrorInfo(errBuff,2048);
    return false;
  }

  // Запускаем задачу
  if (DAQmxFailed((DAQmxStartTask(taskHandle))))
  {
    DAQmxGetExtendedErrorInfo(errBuff,2048);
    return false;
  }

  // Записываем данные
  if (DAQmxFailed((DAQmxWriteDigitalLines(taskHandle,1,1,1.0,DAQmx_Val_GroupByChannel,P0,NULL,NULL))))
  {
    DAQmxGetExtendedErrorInfo(errBuff,2048);
    return false;
  }

  // Останавливаем и очищаем задачу
  if( taskHandle!=0 )
  {
		/*********************************************/
		// DAQmx Stop Code
		/*********************************************/
		DAQmxStopTask(taskHandle);
		DAQmxClearTask(taskHandle);
  }

  return true;
}
//---------------------------------------------------------------------------
float __fastcall TMainForm::ReadAnalogChan(const char *Config)
// чтение аналогового канала x порта AIx устройства y
{
  TaskHandle  taskHandle=0;
  char errBuff[2048]={'\0'};
  int32 read;
  float64 data[NumReadValue];
  double value;
  ErrorADC=false;

  // Создаем задачу
  if (DAQmxFailed((DAQmxCreateTask("",&taskHandle))))
  {
    DAQmxGetExtendedErrorInfo(errBuff,2048);
    ErrorADC=true;
  }

  // Определяем параметры задачи
  if (DAQmxFailed(DAQmxCreateAIVoltageChan(taskHandle,Config,"",DAQmx_Val_RSE,-10.0,10.0,DAQmx_Val_Volts,NULL)))
  {
    DAQmxGetExtendedErrorInfo(errBuff,2048);
    ErrorADC=true;
  }

  // Определяем тактирование
  if (DAQmxFailed(DAQmxCfgSampClkTiming(taskHandle,"",10000,DAQmx_Val_Rising,DAQmx_Val_FiniteSamps,NumReadValue)))
  {
    DAQmxGetExtendedErrorInfo(errBuff,2048);
    ErrorADC=true;
  }

  // Запускаем задачу
  if (DAQmxFailed((DAQmxStartTask(taskHandle))))
  {
    DAQmxGetExtendedErrorInfo(errBuff,2048);
    ErrorADC=true;
  }

  // Считываем данные
  if (DAQmxFailed(DAQmxReadAnalogF64(taskHandle,NumReadValue,1.0,DAQmx_Val_GroupByChannel,data,NumReadValue,&read,NULL)))
  {
    DAQmxGetExtendedErrorInfo(errBuff,2048);
    ErrorADC=true;
  }

  // Останавливаем и очищаем задачу
  if( taskHandle!=0 )
  {
		/*********************************************/
		// DAQmx Stop Code
		/*********************************************/
		DAQmxStopTask(taskHandle);
		DAQmxClearTask(taskHandle);
  }

  try
  {
    value=0;
    for(int i=0;i<read;i++)
    {
      value+=data[i];
    }

    value/=read;
    return value;
  }

  catch(...)
  {
    ErrorADC=true;
    return 0;
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::E_Command3Change(TObject *Sender)
{
  int Comm3;
  if(E_Command3->Text=="") E_Command3->Text=0;
  Comm3=StrToInt(E_Command3->Text);                   // записать текущее значение в переменную
  Command3[OldIndex][3]=Comm3&0xFF;                   // записать байт по индексу OldIndex в массив
/*
  Значение записывается по индексу OldIndex, т.к. этот индекс старый относительно
  метода "по изменении номера БТ" CB_Command3_1Change(TObject *Sender).
*/
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::E_Command3Exit(TObject *Sender)
{
  bool b;
  int min=0;                                           // минимальное значение
  int max=255;                                         // максимальное значение
  int delta=1;
  String EdIzm="";                                     // единица измерения
  int ivalue;                                          // строка значения

  ivalue=StrToInt(E_Command3->Text);                   // значение

  b=IsValidInt(min,max,ivalue,EdIzm);                  // проверка правильности диапазона значений
  if(b)                                                // если правильно
  {
	// записать текущее значение по индексу OldIndex в массив:
	Command3[OldIndex][3]=StrToInt(E_Command3->Text);
/*
    Значение записывается по индексу OldIndex, т.к. этот индекс старый относительно
    метода "по изменении номера БТ" CB_Command3_1Change(TObject *Sender).
*/
  }
  else
  {
	E_Command3->SetFocus();
    ErrorForm->SetFocus();
  }
}
//---------------------------------------------------------------------------
String TMainForm::RoundValue(float delta, float fvalue)
{
  float temp;
  float temp1;

  temp=fvalue;
  temp1=Log10(delta);          // количество знаков после запятой
  // округлить до значения с 2-мя десятичными знаками после запятой:
  fvalue=RoundTo(temp,temp1);  // в BCB6 было String (преобразование типов автоматом)

  return fvalue;
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::E_Command3KeyPress(TObject *Sender, wchar_t &Key)
// запрет введения любых символов, кроме чисел 0...9
{
/*
  Класс set поддерживает множество, в котором не уникальным(в общем случае)
  ключам соответствуют определенные значения. Спецификация его шаблона имеет следующий вид

  template <class Key, class Comp = less<Key>, class Allocator = allocator<Key>> class set

  Здесь Key - тип данных ключей, a Comp - функция, которая сравнивает два ключа.
  Класс set имеет следующие конструкторы.

  explicit set(const Comp &cmpfn = Comp(), const Allocator &a = Allocator));
  set(const set<Key, Comp, Allocator> &ob);
  template  <class InIter> set(InIter start, InIter end,
	const Comp &cmpfn = Comp(), const Allocator &a = Allocator());

  Первая форма конструктора создает пустое множество, Вторая создает множество,
  которое содержит те же элементы, что и множество ob. Третья создает множество, которое
  содержит элементы в диапазоне, заданном параметрами start и end. Функция, заданная
  параметром cmpfn(если она задана), определяет упорядочение множества.

  Для класса set определены следующие операторы сравнения: ==, <, <=, !=, > и >=.

  Строго говоря, set обеспечивает следующую функциональность:
  - добавить элемент в рассматриваемое множество, при этом исключая возможность появления дублей;
  - удалить элемент из множества;
  - узнать количество (различных) элементов в контейнере;
  - проверить, присутствует ли в контейнере некоторый элемент.
*/
  Set<char,0,255>Dig;
	Dig<<'0'<<'1'<<'2'<<'3'<<'4'<<'5'<<'6'<<'7'<<'8'<<'9'<<8;
	if(!Dig.Contains(Key))
	{
	//Application->MessageBox("В поле необходимо вводить только цифры!","Внимание",MB_ICONWARNING);
	  Key=0;
	  return;
	}
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::E_Command3_0Change(TObject *Sender)
{
  ResetBPControl();
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::ResetBPControl(void)  // сброс команд Command 3...5
{
  InitBPControl();                 // очистить предыдущие параметры БТ
  CB_Command3_1->ItemIndex=0;
  CB_SignC->ItemIndex=0;
  E_Command3->Text=IntToStr(255);
  E_Command4->Text=IntToStr(0);
  E_Command5->Text=IntToStr(0);
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::InitBPControl(void)  // инициализация команд Command 3...5
{
  // инициализация массива Command3
  for(int i=0; i<NUMBEROFPOINTS; i++)
  {
    Command3[i][0]=3;   // байт кода команды
    Command3[i][1]=i+1; // 1-й байт пакета данных
    Command3[i][2]=0;   // 2-й байт пакета данных
  }
  Command3[0][3]=255;   // 3-й байт пакета данных (БТ №1)

  for(int i=1; i<NUMBEROFPOINTS; i++)
  {
    Command3[i][3]=0;   // 3-й байт пакета данных (остальные БТ)
  }

  // инициализация массива Command4
  for(int i=0; i<NUMBEROFPOINTS; i++)
  {
    Command4[i][0]=4;   // байт кода команды
    Command4[i][1]=i+1; // 1-й байт пакета данных
    Command4[i][2]=0;   // 2-й байт пакета данных
    Command4[i][3]=0;   // 3-й байт пакета данных
  }

  // инициализация массива Command5
  for(int i=0; i<NUMBEROFPOINTS; i++)
  {
    Command5[i][0]=5;   // байт кода команды
    Command5[i][1]=i+1; // 1-й байт пакета данных
    Command5[i][2]=0;   // 2-й байт пакета данных
    Command5[i][3]=0;   // 3-й байт пакета данных
  }

  // инициализация массива SignC
  for(int i=0; i<NUMBEROFPOINTS; i++)
  {
    D_SignC[i]=0;
  }

  OldIndex=0;
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::E_Command3_0Exit(TObject *Sender)
// когда поле "Количество блестящих точек" неактивно
{
  bool b;
  int min=1;                             // минимальное значение
  int max=NUMBEROFPOINTS;                // максимальное значение
  int delta=1;
  String EdIzm="";                       // единица измерения
  int ivalue;                            // строка значения

  ivalue=StrToInt(E_Command3_0->Text);   // значение

  b=IsValidInt(min,max,ivalue,EdIzm);    // проверка правильности диапазона значений
  if(b)                                  // если правильно
  {
	CB_Command3_1->Clear();              // очистить предыдущее количество БТ

    for(int i=0;i<StrToInt(E_Command3_0->Text);i++)
    {
      CB_Command3_1->Items->Add(IntToStr(i+1)); // увеличить количество БТ в полях "Номер блестящей точки"
    }

	CB_Command3_1->ItemIndex=0;          // номер БТ по умолчанию при изменении числа БТ
  }
  else                                   // если не правильно
  {
	E_Command3_0->SetFocus();            // фокус на поле "Количество блестящих точек"
    ErrorForm->SetFocus();               // вывод сообщения об ошибке
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::CB_Command3_1Change(TObject *Sender)  // по изменении номера БТ
{
  int i, Comm3, Comm4, Comm5, D_Signe;
  i=CB_Command3_1->ItemIndex;                        // записать новый индекс поля выбора CB_Command3_1
  // записать старые значения полей редактирования в переменную:
  Comm3=StrToInt(E_Command3->Text);                  // записать старое значение поля E_Command3 в переменную
  Comm4=StrToInt(E_Command4->Text);                  // записать старое значение поля E_Command4 в переменную
  Comm5=StrToInt(E_Command5->Text);                  // записать старое значение поля E_Command5 в переменную
  // записать старые значения по индексу OldIndex в массив:
  Command3[OldIndex][3]=Comm3&0xFF;
  Command4[OldIndex][3]=Comm4&0xFF;                  // мл. байт
  Command4[OldIndex][2]=(Comm4/256)&0xFF;            // ст. байт
  Command5[OldIndex][3]=Comm5&0xFF;                  // мл. байт
  Command5[OldIndex][2]=(Comm5/256)&0xFF;            // ст. байт
  D_SignC[OldIndex]=CB_SignC->ItemIndex;

  OldIndex=i;  // сохранить текущий индекс как старый для следующего вхождения в метод

  // извлечь значения из массива по текущему индексу в поля редактирования:
  E_Command3->Text=IntToStr(Command3[i][3]);
  E_Command4->Text=IntToStr(Command4[i][2]*256+Command4[i][3]);
  E_Command5->Text=IntToStr(Command5[i][2]*256+Command5[i][3]);
  // извлечь значения из массива по текущему индексу в поле выбора:
  if(D_SignC[i]==0) CB_SignC->ItemIndex=0;
  else              CB_SignC->ItemIndex=1;
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::CB_SignCKeyPress(TObject *Sender, wchar_t &Key)  // запрет введения любых символов
{
  Set<char,0,255>Dig;
  Dig<<8;
  if(!Dig.Contains(Key))
  {
	Key=0;
	return;
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::CB_ShiftChange(TObject *Sender)
{
  for(int i=0; i<7; i++)
  {
	if(CB_Shift->ItemIndex==i) Shift[3]=i;
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::E_Command4Change(TObject *Sender)
// по изменении параметра в поле редактирования
{
  int Comm4;
  if(E_Command4->Text=="") E_Command4->Text=0;
  Comm4=StrToInt(E_Command4->Text);                   // записать текущее значение в переменную
  // записать текущее значение по индексу OldIndex в массив:
  Command4[OldIndex][3]=Comm4&0xFF;                   // мл. байт
  Command4[OldIndex][2]=(Comm4/256)&0xFF;             // ст. байт
/*
  Значение записывается по индексу OldIndex, т.к. этот индекс старый относительно
  метода "по изменении номера БТ" CB_Command3_1Change(TObject *Sender).
*/
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::E_Command4Exit(TObject *Sender)
// по изменении фокуса с данного поля редактирования
{
  bool b;
  int min=0;
  int max=63;
  int delta=1;
  String EdIzm="нс";
  int ivalue;

  ivalue=StrToInt(E_Command4->Text);

  b=IsValidInt(min,max,ivalue,EdIzm);
  if(b)
  {
    int Comm4=StrToInt(E_Command4->Text);               // записать текущее значение в переменную
    // записать текущее значение по индексу OldIndex в массив:
    Command4[OldIndex][3]=Comm4&0xFF;                   // мл. байт
    Command4[OldIndex][2]=(Comm4/256)&0xFF;             // ст. байт
/*
    Значение записывается по индексу OldIndex, т.к. этот индекс старый относительно
    метода "по изменении номера БТ" CB_Command3_1Change(TObject *Sender).
*/
  }
  else
  {
    E_Command4->SetFocus();
    ErrorForm->SetFocus();
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::CB_SignCChange(TObject *Sender)
{
  if(CB_SignC->ItemIndex==0) D_SignC[OldIndex]=0;
  else                       D_SignC[OldIndex]=1;
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::CB_SignCExit(TObject *Sender)
{
  if(CB_SignC->ItemIndex==0) D_SignC[OldIndex]=0;
  else                       D_SignC[OldIndex]=1;
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::E_Command5Change(TObject *Sender)
// по изменении параметра в поле редактирования
{
  float Comm5;
  if(E_Command5->Text=="") E_Command5->Text=0;
  Comm5=StrToFloat(E_Command5->Text);            // записать текущее значение в переменную
  // записать текущее значение по индексу OldIndex в массив:
  Command5[OldIndex][3]=(int)Comm5&0xFF;         // мл. байт
  Command5[OldIndex][2]=((int)Comm5/256)&0xFF;   // ст. байт
/*
  Значение записывается по индексу OldIndex, т.к. этот индекс старый относительно
  метода "по изменении номера БТ" CB_Command3_1Change(TObject *Sender).
*/
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::E_Command5Exit(TObject *Sender)
// по изменении фокуса с данного поля редактирования
{
  bool b;
  float min=-16384;   // -32768*0.5
  float max=16383.5;  // 32767*0.5
  float delta=0.5;    // цена младшего разряда 0.5 Гц
  String EdIzm="гц";
  float fvalue;

  fvalue=StrToFloat(E_Command5->Text);

  b=IsValid(min,max,fvalue,EdIzm);
  if(b)
  {
    E_Command5->Text=RoundValue(delta,fvalue);
    float Comm5=StrToFloat(E_Command5->Text);               // записать текущее значение в переменную
    // записать текущее значение по индексу OldIndex в массив:
    Command5[OldIndex][3]=(int)Comm5&0xFF;                  // мл. байт
    Command5[OldIndex][2]=((int)Comm5/256)&0xFF;            // ст. байт
/*
    Значение записывается по индексу OldIndex, т.к. этот индекс старый относительно
    метода "по изменении номера БТ" CB_Command3_1Change(TObject *Sender).
*/
  }
  else
  {
    E_Command5->SetFocus();
    ErrorForm->SetFocus();
  }
}
//---------------------------------------------------------------------------
bool TMainForm::IsValid(float min, float max, String value, String EdIzm)
{
  float temp;

  try
  {
    temp=StrToFloat(value);

    if((temp>max)||(temp<min))
    {
      ShowError(NotInBorders,min,max,EdIzm);
      return false;
    }
  }

  catch(...)
  {
    ShowError(NotFloat,0,0,"");
    return false;
  }

  return true;
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::CB_Command7Change(TObject *Sender)
{
  for(int i=0; i<64; i++)
  {
    if(CB_Command7->ItemIndex==i) Command7[3]=63-i;
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::CB_Command7Exit(TObject *Sender)
{
  for(int i=0; i<64; i++)
  {
    if(CB_Command7->ItemIndex==i) Command7[3]=63-i;
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::E_Com3Change(TObject *Sender)
{
  int Comm3;
  if(E_Com3->Text=="") E_Com3->Text=0;
  Comm3=StrToInt(E_Com3->Text);                  // записать значение в переменную
  Com3[OldIndex_][3]=Comm3&0xFF;                 // мл. байт
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::E_Com3Exit(TObject *Sender)
{
  bool b;
  int min=0;
  int max=255;
  int delta=1;
  String EdIzm="";
  int ivalue;

  ivalue=StrToInt(E_Com3->Text);

  b=IsValidInt(min,max,ivalue,EdIzm);
  if(b)
  {
    Com3[OldIndex_][3]=StrToInt(E_Com3->Text);
  }
  else
  {
    E_Com3->SetFocus();
    ErrorForm->SetFocus();
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::CB_Com3_1Change(TObject *Sender)  // по изменении номера БТ
{
  int i, Comm3, Comm4, Comm5;
  i=CB_Com3_1->ItemIndex;                            // записать новый порядковый номер БТ
  Comm3=StrToInt(E_Com3->Text);                      // записать значение в переменную
  Comm4=StrToInt(E_Com4->Text);                      // записать значение в переменную
  Comm5=StrToInt(E_Com5->Text);                      // записать значение в переменную
  // записать значения в массив:
  Com3[OldIndex_][3]=Comm3&0xFF;
  Com4[OldIndex_][3]=Comm4&0xFF;                     // мл. байт
  Com4[OldIndex_][2]=(Comm4/256)&0xFF;               // ст. байт
  Com5[OldIndex_][3]=Comm5&0xFF;                     // мл. байт
  Com5[OldIndex_][2]=(Comm5/256)&0xFF;               // ст. байт
  D_SignT[OldIndex_]=CB_SignT->ItemIndex;

  OldIndex_=i;                                       // сохранить текущий порядковый номер
  E_Com3->Text=IntToStr(Com3[i][3]);                 // показать текущее значение
  E_Com4->Text=IntToStr(Com4[i][2]*256+Com4[i][3]);  // показать текущее значение
  E_Com5->Text=IntToStr(Com5[i][2]*256+Com5[i][3]);  // показать текущее значение
  if(D_SignT[i]==0) CB_SignT->ItemIndex=0;
  else              CB_SignT->ItemIndex=1;
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::ResetBPTesting(void)  // сброс команд Com 3...5
{
  InitBPTesting();                                // очистить предыдущие параметры БТ
  CB_Com3_1->ItemIndex=0;
  CB_SignT->ItemIndex=0;
  E_Com3->Text=IntToStr(255);
  E_Com4->Text=IntToStr(0);
  E_Com5->Text=IntToStr(0);
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::InitBPTesting(void)  // инициализация команд Com 3...5
{
  // инициализация массива Com3
  for(int i=0; i<NUMBEROFPOINTS; i++)
  {
    Com3[i][0]=227; // байт кода команды
    Com3[i][1]=i+1; // 1-й байт пакета данных
    Com3[i][2]=0;   // 2-й байт пакета данных
  }
  Com3[0][3]=255;   // 3-й байт пакета данных (БТ №1)

  for(int i=1; i<NUMBEROFPOINTS; i++)
  {
    Com3[i][3]=0;   // 3-й байт пакета данных (остальные БТ)
  }

  // инициализация массива Com4
  for(int i=0; i<NUMBEROFPOINTS; i++)
  {
    Com4[i][0]=228; // байт кода команды
    Com4[i][1]=i+1; // 1-й байт пакета данных
    Com4[i][2]=0;   // 2-й байт пакета данных
    Com4[i][3]=0;   // 3-й байт пакета данных
  }

  // инициализация массива Com5
  for(int i=0; i<NUMBEROFPOINTS; i++)
  {
    Com5[i][0]=229; // байт кода команды
    Com5[i][1]=i+1; // 1-й байт пакета данных
    Com5[i][2]=0;   // 2-й байт пакета данных
    Com5[i][3]=0;   // 3-й байт пакета данных
  }

  // инициализация массива SignT
  for(int i=0; i<NUMBEROFPOINTS; i++)
  {
    D_SignT[i]=0;
  }

  OldIndex_=0;
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::CB_Com3_1Exit(TObject *Sender)
// когда поле "Количество блестящих точек" неактивно
{
  bool b;
  int min=1;                           // минимальное значение
  int max=64;                          // максимальное значение
  String EdIzm="";                     // единица измерения
  int ivalue;                          // строка значения

  ivalue=StrToInt(E_Com3_0->Text);     // значение

  b=IsValidInt(min,max,ivalue,EdIzm);  // проверка правильности диапазона значений
  if(b)                                // если правильно
  {
	CB_Com3_1->Clear();                // очистить предыдущее количество БТ

    for(int i=0;i<StrToInt(E_Com3_0->Text);i++)
    {
      CB_Com3_1->Items->Add(IntToStr(i+1)); // увеличить количество БТ в полях "Номер блестящей точки"
    }

	CB_Com3_1->ItemIndex=0;            // номер БТ по умолчанию при изменении числа БТ
  }
  else                                 // если не правильно
  {
	E_Com3_0->SetFocus();              // фокус на поле "Количество блестящих точек"
    ErrorForm->SetFocus();             // вывод сообщения об ошибке
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::E_Com3_0Change(TObject *Sender)
{
  ResetBPTesting();
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::E_Com3_0Exit(TObject *Sender)
// когда поле "Количество блестящих точек" неактивно
{
  bool b;
  int min=1;                           // минимальное значение
  int max=64;                          // максимальное значение
  String EdIzm="";                     // единица измерения
  int ivalue;                          // строка значения

  ivalue=StrToInt(E_Com3_0->Text);     // значение

  b=IsValidInt(min,max,ivalue,EdIzm);  // проверка правильности диапазона значений
  if(b)                                // если правильно
  {
	CB_Com3_1->Clear();                // очистить предыдущее количество БТ

    for(int i=0;i<StrToInt(E_Com3_0->Text);i++)
    {
      CB_Com3_1->Items->Add(IntToStr(i+1)); // увеличить количество БТ в полях "Номер блестящей точки"
    }

	CB_Com3_1->ItemIndex=0;            // номер БТ по умолчанию при изменении числа БТ
  }
  else                                 // если не правильно
  {
	E_Com3_0->SetFocus();              // фокус на поле "Количество блестящих точек"
    ErrorForm->SetFocus();             // вывод сообщения об ошибке
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::CB_Shift_Change(TObject *Sender)
{
  for(int i=0; i<7; i++)
  {
    if(CB_Shift_->ItemIndex==i) Shift_[3]=i;
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::CB_ShiftExit(TObject *Sender)
{
  for(int i=0; i<7; i++)
  {
	if(CB_Shift->ItemIndex==i) Shift[3]=i;
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::CB_Shift_Exit(TObject *Sender)
{
  for(int i=0; i<7; i++)
  {
    if(CB_Shift_->ItemIndex==i) Shift_[3]=i;
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::E_Com4Change(TObject *Sender)
{
  int Comm4;
  if(E_Com4->Text=="") E_Com4->Text=0;
  Comm4=StrToInt(E_Com4->Text);                   // записать значение в переменную
  Com4[OldIndex_][3]=Comm4&0xFF;                  // мл. байт
  Com4[OldIndex_][2]=(Comm4/256)&0xFF;            // ст. байт
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::E_Com4Exit(TObject *Sender)
{
  bool b;
  int min=0;
  int max=65535;
  int delta=1;
  String EdIzm="нс";
  int ivalue;

  ivalue=StrToInt(E_Com4->Text);

  b=IsValidInt(min,max,ivalue,EdIzm);
  if(b)
  {
    int Comm4=StrToInt(E_Com4->Text);               // записать значение в переменную
    Com4[OldIndex_][3]=Comm4&0xFF;                   // мл. байт
    Com4[OldIndex_][2]=(Comm4/256)&0xFF;             // ст. байт
  }
  else
  {
    E_Com4->SetFocus();
    ErrorForm->SetFocus();
  }
}
//--------------------------------------------------------------------------
void __fastcall TMainForm::E_Com5Change(TObject *Sender)
{
  float Comm5;
  if(E_Com5->Text=="") E_Com5->Text=0;
  Comm5=StrToFloat(E_Com5->Text);                  // записать значение в [гц] в переменную, цена младшего разряда 0.5 Гц
  Com5[OldIndex_][3]=(int)Comm5&0xFF;              // мл. байт
  Com5[OldIndex_][2]=((int)Comm5/256)&0xFF;        // ст. байт
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::E_Com5Exit(TObject *Sender)
{
  bool b;
  float min=0;
  float max=16383.75;  // 65535*0.5/2
  float delta=0.5;
  String EdIzm="гц";
  float fvalue;

  fvalue=StrToFloat(E_Com5->Text);

  b=IsValid(min,max,fvalue,EdIzm);
  if(b)
  {
    E_Com5->Text=RoundValue(delta,value);
    float Comm5=StrToInt(E_Com5->Text);             // записать значение в [гц] в переменную, цена младшего разряда 0.5 Гц
    Com5[OldIndex_][3]=(int)Comm5&0xFF;             // мл. байт
    Com5[OldIndex_][2]=((int)Comm5/256)&0xFF;       // ст. байт
  }
  else
  {
    E_Com5->SetFocus();
    ErrorForm->SetFocus();
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::CB_SignTChange(TObject *Sender)
{
  if(CB_SignT->ItemIndex==0) D_SignT[OldIndex_]=0;
  else                       D_SignT[OldIndex_]=1;
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::CB_SignTExit(TObject *Sender)
{
  if(CB_SignT->ItemIndex==0) D_SignT[OldIndex_]=0;
  else                       D_SignT[OldIndex_]=1;
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::CB_Com6Change(TObject *Sender)
{
  for(int i=0; i<64; i++)
  {
    if(CB_Com6->ItemIndex==i) Com6[3]=63-i;
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::CB_Com7Change(TObject *Sender)
{
  for(int i=0; i<64; i++)
  {
    if(CB_Com7->ItemIndex==i) Com7[3]=63-i;
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::CB_Com8Change(TObject *Sender)
{
  for(int i=0; i<64; i++)
  {
    int code;
    if(CB_Com8->ItemIndex==i) code=14+128*i;    // получение кода параметра
    int code_LSB=code&0xFF;                     // младший байт параметра
    int code_MSB=(code/256)&0xFF;               // старший байт параметра
    Com8[2]=code_MSB;                           // записать значение старшего байта параметра
    Com8[3]=code_LSB;                           // записать значение младшего байта параметра
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::CB_Com9Change(TObject *Sender)
{
  for(int i=0; i<64; i++)
  {
    int code;
    if(CB_Com9->ItemIndex==i) code=14+128*i;    // получение кода параметра
    int code_LSB=code&0xFF;                     // младший байт параметра
    int code_MSB=(code/256)&0xFF;               // старший байт параметра
    Com9[2]=code_MSB;                           // записать значение старшего байта параметра
    Com9[3]=code_LSB;                           // записать значение младшего байта параметра
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::CB_Com10Change(TObject *Sender)
{
  for(int i=0; i<4; i++)
  {
    if(CB_Com10->ItemIndex==i) Com10[3]=i;
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::CB_Com11Change(TObject *Sender)
{
  for(int i=0; i<4; i++)
  {
    if(CB_Com11->ItemIndex==i) Com11[3]=i;
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::CB_OutputChange(TObject *Sender)
{
  UpdateRegister4();  // обновление значения Register 4
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::CB_AuxOutChange(TObject *Sender)
{
  UpdateRegister4();  // обновление значения Register 4
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::E_OutFreqChange(TObject *Sender)
{
  if(E_OutFreq->Text<=1) E_OutFreq->Text=1;  // число не может быть меньше 1
  Fout=StrToFloat(E_OutFreq->Text);          // записать значение в переменную

  Fvco_OD();          // вычисление Fvco и OD
  Ndevider();         // вычисление INT, FRAC и MOD
  UpdateRegister0();  // обновление значения Register 0
  UpdateRegister1();  // обновление значения Register 1
  UpdateRegister4();  // обновление значения Register 4
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::Fvco_OD(void)
{
  OD=1;
  while(Fout*OD<2200) OD*=2;
  Fvco=Fout*OD;

  Fres=ChS*OD;               // запись channel resolution

  // задание Divider_Select:
  //Divider_Select=log(OD)/log(2);

  if(OD==1) Divider_Select=0;
  else
  if(OD==2) Divider_Select=1;
  else
  if(OD==4) Divider_Select=2;
  else
  if(OD==8) Divider_Select=3;
  else
  if(OD==16) Divider_Select=4;
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::Ndevider(void)  // вычисление INT, FRAC и MOD:
{
  double Inv, n;
  Inv=1/Fpfd;            // величина, обратная Fpfd для учёта дробной части N
  N=Fvco*Inv;

  MOD=(REFin*1000)/Fres; //*1000, т.к. REFin [kHz]
  /*
  Функция modf(N, &n) вычисляет целую (INTE) и дробную (FRAC/MOD) части значения аргумента N со знаком.
  Целая часть 'n' со знаком запоминается в ptr. Дробная часть со знаком - возвращаемое значение.
  */
  FRAC=modf(N, &n)*MOD;  // или FRAC=(N-INTE)*MOD
  FRAC=floor(FRAC+0.5);  // округление до ближайшего целого положительного(для отрицательного ceil(x-0.5))
  INTE=n;                // или INTE=(int)N

  int i;
  for(i=1; i<1000; i++)  // упрощение дроби
  {
    if(((int)FRAC%i==0)&&((int)MOD%i==0)&&((int)FRAC!=0)) // если числитель и знаменатель одновременно делятся на число i без остатка
    {
      FRAC/=i;
      MOD/=i;
    }
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::UpdateRegister0(void)  // обновление значения Register 0
{
  int shift_FRAC=0;
  int shift_INT=0;

  Reg[0] &= ~0x7FFFFFF8;           // стереть предыдущее значение Register 0

  shift_FRAC=(int)FRAC&0xFFE;      // FRAC max = 4094
  shift_FRAC*=0x8;
  shift_INT=(int)INTE&0xFFFF;      // INT max = 65535
  shift_INT*=0x8000;

  Reg[0] |= shift_FRAC|shift_INT;  // занести новое значение INT и FRAC

  // обновить значения команд:
  Com13[1]=(int) Reg[0]     &0xFF; // 1-й байт Register 0
  Com13[2]=(int)(Reg[0]>>8) &0xFF; // 2-й байт Register 0
  Com13[3]=(int)(Reg[0]>>16)&0xFF; // 3-й байт Register 0
  Com14[1]=(int)(Reg[0]>>24)&0xFF; // 4-й байт Register 0
/*
  E_Com13_1->Text=IntToStr(Com13[1]);
  E_Com13_2->Text=IntToStr(Com13[2]);
  E_Com13_3->Text=IntToStr(Com13[3]);
  E_Com14_1->Text=IntToStr(Com14[1]);
*/
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::UpdateRegister1(void)  // обновление значения Register 1
{
  int shift_MOD=0;
  int shift_Phase=0;
  int shift_Prescaler=0;

  if(INTE<75)
  {
    Prescaler=0;
  }
  else
  if(INTE>=75)
  {
    Prescaler=1;
  }

  Reg[1] &= ~0xFFFFFFF8;  // стереть предыдущее значение Register 1

  shift_MOD=(int)MOD&0xFFF;                         // MOD max = 4095
  shift_MOD*=0x08;
  shift_Phase=(int)Phase&0xFFF;                     // Phase max = 4095
  shift_Phase*=0x8000;
  shift_Prescaler=Prescaler&0x01;                   // Prescaler max = 1
  shift_Prescaler*=0x8000000;

  Reg[1] |= shift_MOD|shift_Phase|shift_Prescaler;  // занести новые значения

  // обновить значения команд:
  Com14[2]=(int) Reg[1]     &0xFF;                  // 1-й байт Register 1
  Com14[3]=(int)(Reg[1]>>8) &0xFF;                  // 2-й байт Register 1
  Com15[1]=(int)(Reg[1]>>16)&0xFF;                  // 3-й байт Register 1
  Com15[2]=(int)(Reg[1]>>24)&0xFF;                  // 4-й байт Register 1
/*
  E_Com14_2->Text=IntToStr(Com14[2]);
  E_Com14_3->Text=IntToStr(Com14[3]);
  E_Com15_1->Text=IntToStr(Com15[1]);
  E_Com15_2->Text=IntToStr(Com15[2]);
*/
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::UpdateRegister4(void)  // обновление значения Register 4
{
  int shift_RF_Output=0;
  int shift_AUX_Output=0;
  int shift_AUX_Select=0;
  int shift_MTLD=0;
  int shift_VCO_Power_Down=0;
  int shift_BSCD=0;
  int shift_Divider_Select=0;
  int shift_Feedback_Select=0;

  // задание Output:
  if(CB_Output->ItemIndex==0)   RF_Output=0;
  for(int i=1; i<5; i++)
  {
    if(CB_Output->ItemIndex==i) RF_Output=(i+3);
  }

  // задание AUX Output:
  if(CB_AuxOut->ItemIndex==0)   AUX_Output=0;
  for(int i=1; i<5; i++)
  {
    if(CB_AuxOut->ItemIndex==i) AUX_Output=(i+3);
  }

  Reg[4] &= ~0xFFFFFFF8;  // стереть предыдущее значение Register 4

  shift_RF_Output=RF_Output&0x07;                   // Output max = 7
  shift_RF_Output*=0x08;
  shift_AUX_Output=AUX_Output&0x07;                 // AUX Output max = 7
  shift_AUX_Output*=0x40;
  shift_AUX_Select=AUX_Select&0x01;                 // AUX Select max = 1
  shift_AUX_Select*=0x200;
  shift_MTLD=MTLD&0x01;                             // MTLD max = 1
  shift_MTLD*=0x400;
  shift_VCO_Power_Down=VCO_Power_Down&0x01;         // VCO Power Down max = 1
  shift_VCO_Power_Down*=0x800;
  shift_BSCD=(int)BSCD&0xFF;                        // BSCD max = 255
  shift_BSCD*=0x1000;
  shift_Divider_Select=(int)Divider_Select&0x07;    // Divider Select max = 7
  shift_Divider_Select*=0x100000;
  shift_Feedback_Select=Feedback_Select&0x01;       // Feedback Select max = 1
  shift_Feedback_Select*=0x800000;

  Reg[4] |= shift_RF_Output|shift_AUX_Output|shift_AUX_Select|shift_MTLD|shift_VCO_Power_Down
  |shift_BSCD|shift_Divider_Select|shift_Feedback_Select;  // занести новые значения

  // обновить значения команд:
  Com18[2]=(int) Reg[4]     &0xFF;                  // 1-й байт Register 4
  Com18[3]=(int)(Reg[4]>>8) &0xFF;                  // 2-й байт Register 4
  Com19[1]=(int)(Reg[4]>>16)&0xFF;                  // 3-й байт Register 4
  Com19[2]=(int)(Reg[4]>>24)&0xFF;                  // 4-й байт Register 4
/*
  E_Com18_2->Text=IntToStr(Com18[2]);
  E_Com18_3->Text=IntToStr(Com18[3]);
  E_Com19_1->Text=IntToStr(Com19[1]);
  E_Com19_2->Text=IntToStr(Com19[2]);
*/
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::TB_LoadBlpClick(TObject *Sender)  // нажатие на кнопку "Открыть файл .blp"
{
  AddSaveLog("Загрузить файл данных БТ");  // добавить комментарий и сохранить лог

  OpenDialog1->DefaultExt=".blp";
  OpenDialog1->FileName="*.blp";
  OpenDialog1->Filter="Файл данных БТ (*.blp)|*.blp";
  OpenDialog1->Title=" Загрузка файла данных БТ";

  String File;

  if(OpenDialog1->Execute())
/*
  virtual __fastcall bool Execute(HWND ParentWnd);
  Отображает диалог выбора файлов.
  Возвращает true, если пользователь выбрал файл и нажал кнопку "Открыть" ("Open") в диалоге.
  Если пользователь нажал кнопку "Отмена" ("Cancel"), то Execute возвращает false.
*/
  {
	File=OpenDialog1->FileName;
	BlpFName=File;

    if(FileExists(File))
    {
	  Ini= new TIniFile(File);
/*
      Ini->ReadString("Название секции","Имя переменной", "значение");
*/
      // Количество БТ
      E_Command3_0->Text=Ini->ReadString("Файл данных БТ","Количество БТ","1");  // считать из файла в массив
      E_Com3_0->Text=Ini->ReadString("Файл данных БТ","Количество БТ","1");      // считать из файла в массив
      // Координата X БТ, Координата Y БТ, ЭПР БТ
      for(int i=0; i<StrToInt(E_Command3_0->Text); i++)
      {
        // Координата X БТ
        XString[i]=StrToInt(Ini->ReadString("Файл данных БТ","Координата X блестящей точки (БТ)"+IntToStr(i+1)+"\"","0"));  // считать из файла в массив
        // Координата Y БТ
        YString[i]=StrToInt(Ini->ReadString("Файл данных БТ","Координата Y блестящей точки (БТ)"+IntToStr(i+1)+"\"","0"));  // считать из файла в массив
        // ЭПР БТ
        EPRString[i]=StrToInt(Ini->ReadString("Файл данных БТ","ЭПР блестящей точки (БТ)"+IntToStr(i+1)+"\"","0"));  // считать из файла в массив
      }

      AddSaveLog("Загружен файл "+BlpFName);  // добавить комментарий и сохранить лог

      delete Ini;
    }
    else
    {
      ShowError(FileNotExist, 0, 0, "");
      return;
    }
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::TB_LoadSarClick(TObject *Sender)  // нажатие на кнопку "Открыть файл .sar"
{
  AddSaveLog("Загрузить файл данных РЛС и модуля");          // добавить комментарий и сохранить лог

  OpenDialog1->DefaultExt=".sar";
  OpenDialog1->FileName="*.sar";
  OpenDialog1->Title=" Загрузка файла данных РЛС и модуля";
  OpenDialog1->Filter="данные РЛС и модуля (*.sar)|*.sar";

  String File;

  if(OpenDialog1->Execute())
  {
    File=OpenDialog1->FileName;
    FileControl=File;

    if(FileExists(File))
	{
      Ini= new TIniFile(File);
/*
      Ini->ReadString("Название секции","Имя переменной", "значение");
*/
	  // Скорость полёта РСА
	  LE_V->Text=Ini->ReadString("Данные РЛС и модуля","Скорость полёта РСА","1");   // считать из файла в массив
	  // Несущая частота
	  LE_f->Text=Ini->ReadString("Данные РЛС и модуля","Несущая частота","1");       // считать из файла в массив
	  // Направление полёта
	  LE_Dir->Text=Ini->ReadString("Данные РЛС и модуля","Направление полёта","1");  // считать из файла в массив
	  // Положение антенн РСА
	  LE_A->Text=Ini->ReadString("Данные РЛС и модуля","Положение антенн РСА","1");  // считать из файла в массив
	  // Расстояние до цели
	  LE_D->Text=Ini->ReadString("Данные РЛС и модуля","Расстояние до цели","1");    // считать из файла в массив

      AddSaveLog("Загружен файл "+SarFName);           // добавить комментарий и сохранить лог

	  delete Ini;
	}
	else
	{
	  ShowError(FileNotExist, 0, 0, "");
	}
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::TB_SaveControlClick(TObject *Sender)
{
  AddSaveLog("Сохранить файл результатов в режиме Работа");  // добавить комментарий и сохранить лог

  SaveDialog1->DefaultExt=".ctr";
  SaveDialog1->FileName="*.ctr";
  SaveDialog1->Filter="Файл режима Работа (*.ctr)|*.ctr";
  SaveDialog1->Title=" Сохранение файла режима Работа";

  AnsiString File; // в BCB6 было String
/*
  В заголовочном файле sysmac.h указано:

  #if defined(_DELPHI_STRING_UNICODE)
	typedef UnicodeString        String;           //
  #else
	typedef AnsiString           String;           //
  #endif

  Т.е. по умолчанию тип String есть UnicodeString.
  В BCB6 по умолчанию тип String есть AnsiString.
*/
  FILE *F;

  if(SaveDialog1->Execute())
  {
    File=SaveDialog1->FileName;
    FileControl=File;
    if(F!=NULL)
	{
      F=fopen(File.c_str(),"w+"); // открыть файл с перезаписью
      fclose(F);                  // закрыть файл
    }
    Ini= new TIniFile(File); // создание нового файла .ini
/*
    Ini->WriteString("Название секции","Имя переменной", "значение");
*/
    Ini->WriteString("Время и дата","Время и дата",P_SystemTime->Caption);
	Ini->WriteString("Данные в режиме Работа","Количество БТ",E_Command3_0->Text);

	// Command3
    for(int i=0; i<StrToInt(E_Command3_0->Text); i++)
    {
	  Ini->WriteString("Данные в режиме Работа","Команда \"Амплитуда блестящей точки (БТ)\""+IntToStr(i+1)+"\"",Command3[i][3]);  // запись из массива в файл
    }
    // Command4
    for(int i=0; i<StrToInt(E_Command3_0->Text); i++)
    {
      int Command=Command4[i][3]+Command4[i][2]*256;
	  Ini->WriteString("Данные в режиме Работа","Команда \"Время задержки (БТ)"+IntToStr(i+1)+"\"",Command);   // запись из массива в файл
    }
    // Command5, цена младшего разряда 0.5 Гц
    for(int i=0; i<StrToInt(E_Command3_0->Text); i++)
    {
	  Ini->WriteString("Данные в режиме Работа","Команда \"Знак доплеровского сдвига частоты (БТ)\""+IntToStr(i+1)+"\"",D_SignC[i]);  // запись из массива в файл
      int Command=(Command5[i][3]+Command5[i][2]*256);
	  Ini->WriteString("Данные в режиме Работа","Команда \"Доплеровский сдвиг частоты (БТ)\""+IntToStr(i+1)+"\"",Command);  // запись из массива в файл
    }
    // Команда "Сдвиг разрядов"
	Ini->WriteString("Данные в режиме Работа","Команда \"Сдвиг разрядов\"",IntToStr(Shift[3])); // запись из массива в файл
    // Command6
    int Comm6=Command6[3]+Command6[2]*256;
	Ini->WriteString("Данные в режиме Работа","Команда \"Центральная частота рабочей полосы\"",Comm6);   // запись из массива в файл
    // Command7
    Ini->WriteString("Данные в режиме Работа","Команда \"Коэффициент ослабления передатчика ППРМ-2\"",IntToStr(Command7[3])); // запись из массива в файл

    delete Ini;
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::TB_SaveTestingClick(TObject *Sender)
{
  AddSaveLog("Сохранить файл результатов Сервисного режима");  // добавить комментарий и сохранить лог

  SaveDialog1->DefaultExt=".tst";
  SaveDialog1->FileName="*.tst";
  SaveDialog1->Filter="Файл Сервисного режима (*.tst)|*.tst";
  SaveDialog1->Title=" Сохранение файла Сервисного режима";

  AnsiString File; // в BCB6 было String
/*
  В заголовочном файле sysmac.h указано:

  #if defined(_DELPHI_STRING_UNICODE)
	typedef UnicodeString        String;           //
  #else
	typedef AnsiString           String;           //
  #endif

  Т.е. по умолчанию тип String есть UnicodeString.
  В BCB6 по умолчанию тип String есть AnsiString.
*/
  FILE *F;

  if(SaveDialog1->Execute())
  {
    File=SaveDialog1->FileName;
    FileControl=File;
    if(F!=NULL)
    {
      F=fopen(File.c_str(),"w+"); // открыть файл с перезаписью
      fclose(F);                  // закрыть файл
    }
    Ini= new TIniFile(File); // создание нового файла .ini
/*
    Ini->WriteString("Название секции","Имя переменной", "значение");
*/
    Ini->WriteString("Время и дата","Время и дата",P_SystemTime->Caption);
	Ini->WriteString("Данные в Сервисном режиме","Количество БТ",E_Com3_0->Text);

    // Com3
    for(int i=0; i<StrToInt(E_Com3_0->Text); i++)
    {
	  Ini->WriteString("Данные в Сервисном режиме","Команда \"Амплитуда блестящей точки (БТ)\""+IntToStr(i+1)+"\"",Com3[i][3]);  // запись из массива в файл
    }
    // Com4
    for(int i=0; i<StrToInt(E_Com3_0->Text); i++)
    {
      int Command=Com4[i][3]+Com4[i][2]*256;
	  Ini->WriteString("Данные в Сервисном режиме","Команда \"Время задержки (БТ)"+IntToStr(i+1)+"\"",Command);   // запись из массива в файл
    }
    // Com5, цена младшего разряда 0.5 Гц
    for(int i=0; i<StrToInt(E_Com3_0->Text); i++)
	{
	  Ini->WriteString("Данные в Сервисном режиме","Команда \"Знак доплеровского сдвига частоты (БТ)\""+IntToStr(i+1)+"\"",D_SignT[i]);  // запись из массива в файл
      int Command=(Com5[i][3]+Com5[i][2]*256);
	  Ini->WriteString("Данные в Сервисном режиме","Команда \"Доплеровский сдвиг частоты (БТ)\""+IntToStr(i+1)+"\"",Command);  // запись из массива в файл
	}
    // Команда "Сдвиг разрядов"
	Ini->WriteString("Данные в Сервисном режиме","Команда \"Сдвиг разрядов\"",IntToStr(Shift_[3])); // запись из массива в файл
	// Com6
	Ini->WriteString("Данные в Сервисном режиме","Команда \"Коэффициент ослабления приёмника ППРМ-2\"",IntToStr(Com6[3]));   // запись из массива в файл
    // Com7
	Ini->WriteString("Данные в Сервисном режиме","Команда \"Коэффициент ослабления передатчика ППРМ-2\"",IntToStr(Com7[3])); // запись из массива в файл
    // Com8
    int Comm8=Com8[3]+Com8[2]*256;
	Ini->WriteString("Данные в Сервисном режиме","Команда \"Частота среза фильтра гетеродина приёмника ППРМ-2\"",Comm8);  // запись из массива в файл
    // Com9
    int Comm9=Com9[3]+Com9[2]*256;
	Ini->WriteString("Данные в Сервисном режиме","Команда \"Частота среза фильтра гетеродина передатчика ППРМ-2\"",Comm9);  // запись из массива в файл
    // Com10
	Ini->WriteString("Данные в Сервисном режиме","Команда \"Код управления входным преселектором\"",IntToStr(Com10[3])); // запись из массива в файл
	// Com11
	Ini->WriteString("Данные в Сервисном режиме","Команда \"Код управления выходным преселектором\"",IntToStr(Com11[3])); // запись из массива в файл
	// Com13
    unsigned long int Comm13=Com13[3]+Com13[2]*256+Com13[1]*65536;
	Ini->WriteString("Данные в Сервисном режиме","Команда \"Рабочие регистры синтезатора платы ППРМ-2. Пакет 1\"",Comm13); // запись из массива в файл
    // Com14
    unsigned long int Comm14=Com14[3]+Com14[2]*256+Com14[1]*65536;
	Ini->WriteString("Данные в Сервисном режиме","Команда \"Рабочие регистры синтезатора платы ППРМ-2. Пакет 2\"",Comm14); // запись из массива в файл
	// Com15
    unsigned long int Comm15=Com15[3]+Com15[2]*256+Com15[1]*65536;
	Ini->WriteString("Данные в Сервисном режиме","Команда \"Рабочие регистры синтезатора платы ППРМ-2. Пакет 3\"",Comm15); // запись из массива в файл
	// Com16
    unsigned long int Comm16=Com16[3]+Com16[2]*256+Com16[1]*65536;
	Ini->WriteString("Данные в Сервисном режиме","Команда \"Рабочие регистры синтезатора платы ППРМ-2. Пакет 4\"",Comm16); // запись из массива в файл
    // Com17
	unsigned long int Comm17=Com17[3]+Com17[2]*256+Com17[1]*65536;
	Ini->WriteString("Данные в Сервисном режиме","Команда \"Рабочие регистры синтезатора платы ППРМ-2. Пакет 5\"",Comm17); // запись из массива в файл
    // Com18
    unsigned long int Comm18=Com18[3]+Com18[2]*256+Com18[1]*65536;
	Ini->WriteString("Данные в Сервисном режиме","Команда \"Рабочие регистры синтезатора платы ППРМ-2. Пакет 6\"",Comm18); // запись из массива в файл
    // Com19
    unsigned long int Comm19=Com19[3]+Com19[2]*256+Com19[1]*65536;
	Ini->WriteString("Данные в Сервисном режиме","Команда \"Рабочие регистры синтезатора платы ППРМ-2. Пакет 7\"",Comm19); // запись из массива в файл
    // Com20
	unsigned long int Comm20=Com20[3]+Com20[2]*256+Com20[1]*65536;
	Ini->WriteString("Данные в Сервисном режиме","Команда \"Рабочие регистры синтезатора платы ППРМ-2. Пакет 8\"",Comm20); // запись из массива в файл

    delete Ini;
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::TB_LoadControlClick(TObject *Sender)
{
  AddSaveLog("Загрузить файл результатов в режиме Работа");  // добавить комментарий и сохранить лог

  ResetBPControl();

  OpenDialog1->DefaultExt=".ctr";
  OpenDialog1->FileName="*.ctr";
  OpenDialog1->Filter="Файл режима Работа (*.ctr)|*.ctr";
  OpenDialog1->Title=" Загрузка файла режима Работа";

  String File;

  if(OpenDialog1->Execute())
  {
    File=OpenDialog1->FileName;
    FileControl=File;

    if(FileExists(File))
    {
      Ini= new TIniFile(File);
/*
      Ini->ReadString("Название секции","Имя переменной", "значение");
*/
      // Количество БТ
	   E_Command3_0->Text=Ini->ReadString("Данные в режиме Работа","Количество БТ","1");                // считать из файла в массив
      // Command3, Command4, Command5
      for(int i=0; i<StrToInt(E_Command3_0->Text); i++)
      {
        // Command3
		Command3[i][3]=StrToInt(Ini->ReadString("Данные в режиме Работа","Команда \"Амплитуда блестящей точки (БТ)\""+IntToStr(i+1)+"\"","0"));  // считать из файла в массив
        // Command4
		int Comm4=StrToInt(Ini->ReadString("Данные в режиме Работа","Команда \"Время задержки (БТ)"+IntToStr(i+1)+"\"","0"));                    // считать из файла в массив
        Command4[i][3]=Comm4&0xFF;                // мл. байт
        Command4[i][2]=(Comm4/256)&0xFF;          // ст. байт
        // Command5, цена младшего разряда 0.5 Гц
		D_SignC[i]=StrToInt(Ini->ReadString("Данные в режиме Работа","Команда \"Знак доплеровского сдвига частоты (БТ)\""+IntToStr(i+1)+"\"","0")); // считать из файла
        if(D_SignC[i]==0) CB_SignC->ItemIndex=0;
        else              CB_SignC->ItemIndex=1;

		int Comm5=StrToInt(Ini->ReadString("Данные в режиме Работа","Команда \"Доплеровский сдвиг частоты (БТ)\""+IntToStr(i+1)+"\"","0"));  // считать из файла в массив
        Command5[i][3]=Comm5&0xFF;                // мл. байт
        Command5[i][2]=(Comm5/256)&0xFF;          // ст. байт
      }
      CB_Command3_1->Clear();                     // очистить предыдущее количество БТ

      for(int i=0;i<StrToInt(E_Command3_0->Text);i++)
      {
        CB_Command3_1->Items->Add(IntToStr(i+1)); // увеличить количество БТ в полях "Номер блестящей точки"
      }

      CB_Command3_1->ItemIndex=OldIndex;          // номер БТ по умолчанию при изменении числа БТ
      E_Command3->Text=Command3[OldIndex][3];                           // показать текущее значение
      E_Command4->Text=Command4[OldIndex][3]+Command4[OldIndex][2]*256; // показать текущее значение
      E_Command5->Text=Command5[OldIndex][3]+Command5[OldIndex][2]*256; // показать текущее значение
      // Команда "Сдвиг разрядов"
	  Shift[3]=StrToInt(Ini->ReadString("Данные в режиме Работа","Команда \"Сдвиг разрядов\"","0")); // считать из файла в массив
      for(int i=0; i<7; i++)
      {
        if(Shift[3]==i) CB_Shift->ItemIndex=i; // запись в форму
      }
      // Command6
	  int Comm6=StrToInt(Ini->ReadString("Данные в режиме Работа","Команда \"Центральная частота рабочей полосы\"","0"));      // считать из файла в массив
      Command6[3]=Comm6&0xFF;                     // мл. байт
      Command6[2]=(Comm6/256)&0xFF;               // ст. байт
      // Command7
      Command7[3]=StrToInt(Ini->ReadString("Данные в режиме Работа","Команда \"Коэффициент ослабления передатчика ППРМ-2\"","0")); // считать из файла в массив
      for(int i=0; i<64; i++)
      {
        if(Command7[3]==63-i) CB_Command7->ItemIndex=i; // запись в форму
      }

      AddSaveLog("Загружен файл "+FileControl);  // добавить комментарий и сохранить лог

      delete Ini;
    }
    else
    {
      ShowError(FileNotExist, 0, 0, "");
    }
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::TB_LoadTestingClick(TObject *Sender)
{
  AddSaveLog("Загрузить файл результатов в Сервисном режиме");  // добавить комментарий и сохранить лог

  ResetBPTesting();

  OpenDialog1->DefaultExt=".tst";
  OpenDialog1->FileName="*.tst";
  OpenDialog1->Filter="Файл Сервисного (*.tst)|*.tst";
  OpenDialog1->Title=" Загрузка файла Сервисного режима";

  String File;

  if(OpenDialog1->Execute())
  {
    File=OpenDialog1->FileName;
    FileTesting=File;

    if(FileExists(File))
    {
      Ini= new TIniFile(File);
/*
      Ini->ReadString("Название секции","Имя переменной", "значение");
*/
      // Количество БТ
      E_Com3_0->Text=Ini->ReadString("Данные в Сервисном режиме","Количество БТ","1");
	  // Com3, Com4, Com5
      for(int i=0; i<StrToInt(E_Com3_0->Text); i++)
      {
        // Com3
		Com3[i][3]=StrToInt(Ini->ReadString("Данные в Сервисном режиме","Команда \"Амплитуда блестящей точки (БТ)\""+IntToStr(i+1)+"\"","0")); // считать из файла в массив
        // Com4
		int Comm4=StrToInt(Ini->ReadString("Данные в Сервисном режиме","Команда \"Время задержки (БТ)"+IntToStr(i+1)+"\"","0"));             // считать из файла в массив
        Com4[i][3]=Comm4&0xFF;                // мл. байт
        Com4[i][2]=(Comm4/256)&0xFF;          // ст. байт
        // Com5, цена младшего разряда 0.5 Гц
		D_SignT[i]=StrToInt(Ini->ReadString("Данные в Сервисном режиме","Команда \"Знак доплеровского сдвига частоты (БТ)\""+IntToStr(i+1)+"\"","0")); // считать из файла
        if(D_SignT[i]==0) CB_SignT->ItemIndex=0;
        else              CB_SignT->ItemIndex=1;

		int Comm5=StrToInt(Ini->ReadString("Данные в Сервисном режиме","Команда \"Доплеровский сдвиг частоты (БТ)\""+IntToStr(i+1)+"\"","0")); // считать из файла в массив
        Com5[i][3]=Comm5&0xFF;                // мл. байт
        Com5[i][2]=(Comm5/256)&0xFF;          // ст. байт
      }
      CB_Com3_1->Clear();                     // очистить предыдущее количество БТ

      for(int i=0;i<StrToInt(E_Com3_0->Text);i++)
      {
        CB_Com3_1->Items->Add(IntToStr(i+1)); // увеличить количество БТ в полях "Номер блестящей точки"
      }

      CB_Com3_1->ItemIndex=OldIndex_;         // номер БТ по умолчанию при изменении числа БТ
      E_Com3->Text=Com3[OldIndex_][3];                        // показать текущее значение
      E_Com4->Text=Com4[OldIndex_][3]+Com4[OldIndex_][2]*256; // показать текущее значение
      E_Com5->Text=Com5[OldIndex_][3]+Com5[OldIndex_][2]*256; // показать текущее значение
	  // Команда "Сдвиг разрядов"
	  Shift_[3]=StrToInt(Ini->ReadString("Данные в Сервисном режиме","Команда \"Сдвиг разрядов\"","0")); // считать из файла в массив
      for(int i=0; i<7; i++)
      {
        if(Shift_[3]==i) CB_Shift_->ItemIndex=i; // запись в форму
      }
      // Com6
	  Com6[3]=StrToInt(Ini->ReadString("Данные в Сервисном режиме","Команда \"Коэффициент ослабления приёмника ППРМ-2\"","0")); // считать из файла в массив
      for(int i=0; i<64; i++)
      {
        if(Com6[3]==63-i) CB_Com6->ItemIndex=i; // запись в форму
      }
      // Com7
	  Com7[3]=StrToInt(Ini->ReadString("Данные в Сервисном режиме","Команда \"Коэффициент ослабления передатчика ППРМ-2\"","0")); // считать из файла в массив
      for(int i=0; i<64; i++)
      {
        if(Com7[3]==63-i) CB_Com7->ItemIndex=i; // запись в форму
      }
      // Com8
	  int Comm8=StrToInt(Ini->ReadString("Данные в Сервисном режиме","Команда \"Частота среза фильтра гетеродина приёмника ППРМ-2\"","0"));      // считать из файла в массив
      Com8[3]=Comm8&0xFF;                       // мл. байт
      Com8[2]=(Comm8/256)&0xFF;                 // ст. байт
      for(int i=0; i<=15; i++)
      {
        if(Comm8==14+i*128) CB_Com8->ItemIndex=i;      // запись в форму
      }
      // Com9
	  int Comm9=StrToInt(Ini->ReadString("Данные в Сервисном режиме","Команда \"Частота среза фильтра гетеродина приёмника ППРМ-2\"","0"));      // считать из файла в массив
      Com9[3]=Comm9&0xFF;                       // мл. байт
      Com9[2]=(Comm9/256)&0xFF;                 // ст. байт
      for(int i=0; i<=15; i++)
      {
        if(Comm9==14+i*128) CB_Com9->ItemIndex=i;      // запись в форму
      }
      // Com10
	  Com10[3]=StrToInt(Ini->ReadString("Данные в Сервисном режиме","Команда \"Код управления входным преселектором\"","0")); // считать из файла в массив
      for(int i=0; i<=3; i++)
      {
        if(Com10[3]==i) CB_Com10->ItemIndex=i; // запись в форму
      }
      // Com11
	  Com11[3]=StrToInt(Ini->ReadString("Данные в Сервисном режиме","Команда \"Код управления выходным преселектором\"","0")); // считать из файла в массив
      for(int i=0; i<=3; i++)
      {
        if(Com11[3]==i) CB_Com11->ItemIndex=i; // запись в форму
      }
      // Com13
	  unsigned long int Comm13=StrToInt(Ini->ReadString("Данные в Сервисном режиме","Команда \"Рабочие регистры синтезатора платы ППРМ-2. Пакет 1\"","0"));      // считать из файла в массив
      Com13[3]=Comm13&0xFF;                    // мл. байт
      Com13[2]=(Comm13/256)&0xFF;              // ср. байт
	  Com13[1]=(Comm13/65536)&0xFF;            // ст. байт

      // Com14
	  unsigned long int Comm14=StrToInt(Ini->ReadString("Данные в Сервисном режиме","Команда \"Рабочие регистры синтезатора платы ППРМ-2. Пакет 2\"","0"));      // считать из файла в массив
      Com14[3]=Comm14&0xFF;                    // мл. байт
      Com14[2]=(Comm14/256)&0xFF;              // ср. байт
	  Com14[1]=(Comm14/65536)&0xFF;            // ст. байт

      // Com15
	  unsigned long int Comm15=StrToInt(Ini->ReadString("Данные в Сервисном режиме","Команда \"Рабочие регистры синтезатора платы ППРМ-2. Пакет 3\"","0"));      // считать из файла в массив
      Com15[3]=Comm15&0xFF;                    // мл. байт
      Com15[2]=(Comm15/256)&0xFF;              // ср. байт
	  Com15[1]=(Comm15/65536)&0xFF;            // ст. байт

      // Com16
	  unsigned long int Comm16=StrToInt(Ini->ReadString("Данные в Сервисном режиме","Команда \"Рабочие регистры синтезатора платы ППРМ-2. Пакет 4\"","0"));      // считать из файла в массив
      Com16[3]=Comm16&0xFF;                    // мл. байт
      Com16[2]=(Comm16/256)&0xFF;              // ср. байт
	  Com16[1]=(Comm16/65536)&0xFF;            // ст. байт

      // Com17
	  unsigned long int Comm17=StrToInt(Ini->ReadString("Данные в Сервисном режиме","Команда \"Рабочие регистры синтезатора платы ППРМ-2. Пакет 5\"","0"));      // считать из файла в массив
      Com17[3]=Comm17&0xFF;                    // мл. байт
      Com17[2]=(Comm17/256)&0xFF;              // ср. байт
	  Com17[1]=(Comm17/65536)&0xFF;            // ст. байт

      // Com18
	  unsigned long int Comm18=StrToInt(Ini->ReadString("Данные в Сервисном режиме","Команда \"Рабочие регистры синтезатора платы ППРМ-2. Пакет 6\"","0"));      // считать из файла в массив
      Com18[3]=Comm18&0xFF;                    // мл. байт
      Com18[2]=(Comm18/256)&0xFF;              // ср. байт
	  Com18[1]=(Comm18/65536)&0xFF;            // ст. байт

      // Com19
	  unsigned long int Comm19=StrToInt(Ini->ReadString("Данные в Сервисном режиме","Команда \"Рабочие регистры синтезатора платы ППРМ-2. Пакет 7\"","0"));      // считать из файла в массив
      Com19[3]=Comm19&0xFF;                    // мл. байт
      Com19[2]=(Comm19/256)&0xFF;              // ср. байт
	  Com19[1]=(Comm19/65536)&0xFF;            // ст. байт

      // Com20
      unsigned long int Comm20=StrToInt(Ini->ReadString("Данные в Сервисном режиме","Команда \"Рабочие регистры синтезатора платы ППРМ-2. Пакет 8\"","0"));      // считать из файла в массив
      Com20[3]=Comm20&0xFF;                    // мл. байт
      Com20[2]=(Comm20/256)&0xFF;              // ср. байт
	  Com20[1]=(Comm20/65536)&0xFF;            // ст. байт

      UpdateAllRegisters();

      AddSaveLog("Загружен файл "+FileTesting);  // добавить комментарий и сохранить лог

      delete Ini;
	}
	else
	{
	  ShowError(FileNotExist, 0, 0, "");
	}
  }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::UpdateAllRegisters(void)  // обновление значения Register 0...5
{
  int shift_Com13_1=0;
  int shift_Com13_2=0;
  int shift_Com13_3=0;

  int shift_Com14_1=0;
  int shift_Com14_2=0;
  int shift_Com14_3=0;

  int shift_Com15_1=0;
  int shift_Com15_2=0;

  int shift_Com18_2=0;
  int shift_Com18_3=0;

  int shift_Com19_1=0;
  int shift_Com19_2=0;

  Reg[0] &= ~0xFFFFFFFF;  // стереть предыдущее значение Register 0
  Reg[1] &= ~0xFFFFFFFF;  // стереть предыдущее значение Register 1
  Reg[4] &= ~0xFFFFFFFF;  // стереть предыдущее значение Register 4

  shift_Com13_1=Com13[1];
  shift_Com13_2=Com13[2]*0x100;
  shift_Com13_3=Com13[3]*0x10000;
  shift_Com14_1=Com14[1]*0x1000000;

  Reg[0] |= shift_Com13_1|shift_Com13_2|shift_Com13_3|shift_Com14_1;  // занести новые значения

  // обновить значения параметров:
  FRAC=(int)(Reg[0]>>3) &0xFFF;
  INTE=(int)(Reg[0]>>15)&0xFFFF;

  shift_Com14_2=Com14[2];
  shift_Com14_3=Com14[3]*0x100;
  shift_Com15_1=Com15[1]*0x10000;
  shift_Com15_2=Com15[2]*0x1000000;

  Reg[1] |= shift_Com14_2|shift_Com14_3|shift_Com15_1|shift_Com15_2;  // занести новые значения

  // обновить значения параметров:
  MOD=(int)(Reg[1]>>3) &0xFFF;

  shift_Com18_2=Com18[2];
  shift_Com18_3=Com18[3]*0x100;
  shift_Com19_1=Com19[1]*0x10000;
  shift_Com19_2=Com19[2]*0x1000000;

  Reg[4] |= shift_Com18_2|shift_Com18_3|shift_Com19_1|shift_Com19_2;  // занести новые значения

  // обновить значения параметров:
  RF_Output=(int)(Reg[4]>>3)&0x07;
  AUX_Output=(int)(Reg[4]>>6)&0x07;
  Divider_Select=(int)(Reg[4]>>20)&0x07;

  // задание Output:
  if(RF_Output==0)   CB_Output->ItemIndex=0;
  for(int i=1; i<5; i++)
  {
    if(RF_Output==(i+3)) CB_Output->ItemIndex=i;
  }

  // задание AUX Output:
  if(AUX_Output==0)   CB_AuxOut->ItemIndex=0;
  for(int i=1; i<5; i++)
  {
    if(AUX_Output==(i+3)) CB_AuxOut->ItemIndex=i;
  }

  // задание OD:
  //OD=pow(10, Divider_Select*log(2));

  if(Divider_Select==0) OD=1;
  else
  if(Divider_Select==1) OD=2;
  else
  if(Divider_Select==2) OD=4;
  else
  if(Divider_Select==3) OD=8;
  else
  if(Divider_Select==4) OD=16;

  // задание AUX Fout:
  Fout=(INTE+FRAC/MOD)*(Fpfd/OD);
  E_OutFreq->Text=FloatToStr(Fout);
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::B_ReadyClick(TObject *Sender)
{
  AddSaveLog("Подготовить команды");  // добавить комментарий и сохранить лог

  // Скорость полёта РСА V
  if(LE_V->Text!="")
  {
	V=StrToInt(LE_V->Text);  // подготовить значение
	//M_Debug->Lines->Add(Fi);
  }

  // Несущая частота
  if(LE_f->Text!="")
  {
	f=StrToInt(LE_f->Text);  // подготовить значение
	//M_Debug->Lines->Add(Fi);
  }

  // Направления полёта Fi относительно направления на север
  if(LE_Fi->Text!="")
  {
	Fi=StrToInt(LE_Fi->Text);  // подготовить значение направления полёта
	//M_Debug->Lines->Add(Fi);
  }

  // Расстояние до цели D
  if(LE_D->Text!="")
  {
	D=StrToFloat(LE_Fi->Text);  // подготовить значение направления полёта
	//M_Debug->Lines->Add(Fi);
  }




  // Скорость полёта РСА V, несущая частота f, расстояние до цели D
  if((size_t)LV_Sar1->Items->Count!=0) // если количество строк LV_Sar1 не нулевое
  {
    V=StrToInt(LV_Sar1->Items->Item[0]->Caption.c_str());              // подготовить значение скорости полёта РСА
    f=StrToInt(LV_Sar1->Items->Item[0]->SubItems->Strings[0].c_str()); // подготовить значение несущей частоты
    D=StrToInt(LV_Sar1->Items->Item[0]->SubItems->Strings[3].c_str()); // подготовить значение расстояния до цели

    if(f>=8500&&f<=17500)                       // если диапазон правильный
    {
      int rounding=f/10;                        // округление до числа, кратного 10
      f=rounding*10;
      int code=(f-8500)/10;                     // получение кода центральной частоты
      int code_LSB=code&0xFF;                   // младший байт центральной частоты рабочей полосы
      int code_MSB=(code/256)&0xFF;             // старший байт центральной частоты рабочей полосы
      Command6[2]=code_MSB;                     // записать значение старшего байта центральной частоты рабочей полосы
      Command6[3]=code_LSB;                     // записать значение младшего байта центральной частоты рабочей полосы
    }

    E_Command6->Text=IntToStr(f);

    //M_Debug->Lines->Add(V);
    //M_Debug->Lines->Add(f);
    //M_Debug->Lines->Add(D);
  }

  CB_Command3_1->Clear();                          // очистить предыдущее количество БТ
  CB_Com3_1->Clear();                              // очистить предыдущее количество БТ

  for(int i=0;i<StrToInt(E_Command3_0->Text);i++)
  {
    CB_Command3_1->Items->Add(IntToStr(i+1));      // увеличить количество БТ в полях "Номер блестящей точки"
  }

  for(int i=0;i<StrToInt(E_Com3_0->Text);i++)
  {
    CB_Com3_1->Items->Add(IntToStr(i+1));          // увеличить количество БТ в полях "Номер блестящей точки"
  }
  // Command3, Command4, Command5, Com3, Com4, Com5
  for(int i=0;i<StrToInt(E_Command3_0->Text);++i)  // перебор БТ
  {
    // ЭПР
    float EPR=StrToFloat(EPRString[i]);            // подготовить значение ЭПР

    // Координаты
    X=XString[i];                                  // подготовить значение координаты БТ по оси X
    Y=YString[i];                                  // подготовить значение координаты БТ по оси Y
    //float arg=Fi*pi/180;                         // перевод градусов в радианы
    //float Xi=X*cos(arg)+Y*sin(arg);              // координата X с учётом направления полёта Fi
    //float Yi=Y*cos(arg)-X*sin(arg);              // координата Y с учётом направления полёта Fi
    //M_Debug->Lines->Add(Xi);
    //M_Debug->Lines->Add(Yi);

    // Время задержки
    //Tau=((2*Xi)/c-1мкс)*10^9 [нс]                // формула времени задержки БТ [нс] (Калинин)
    //float Tau=2*Xi*3.33-1000;                    // время задержки БТ [нс](Калинин)
    //float Tau=2*Yi*3.33-1000;                    // время задержки БТ [нс](учёт направления полёта Fi)
    float Tau=2*Y*3.33-1000;                       // время задержки БТ [нс](без учёта направления полёта Fi)
    int Tau_LSB=((int)Tau)&0xFF;                   // младший байт времени задержки БТ
    int Tau_MSB=((int)Tau/256)&0xFF;               // старший байт времени задержки БТ

    // Доплеровское смещение
    //fdi=2*f[МГц=1000000Гц]*V*Yi/c*D;             // формула доплеровского смещения БТ [Гц]
    //double K1=2*((double)f/1000)*V*Yi/D;         // (Калинин)
    //double K1=2*((double)f/1000)*V*Xi/D;         // (учёт направления полёта Fi)
    double K1=2*((double)f/1000)*V*X/D;            // (без учёта направления полёта Fi)
    double K2=1000000*1000/c;
    double fdi=K1*K2;                              // доплеровское смещение БТ [Гц] для вывода в программе

    //M_Debug->Lines->Add(fdi);
    if(fdi<0)
    {
      fdi=-fdi;
      CB_SignC->ItemIndex=1;
      CB_SignT->ItemIndex=1;
    }
    else
    {
      CB_SignC->ItemIndex=0;
      CB_SignT->ItemIndex=0;
    }
    //M_Debug->Lines->Add(CB_SignC->ItemIndex);
    //M_Debug->Lines->Add(CB_SignT->ItemIndex);

    int fdi_LSB=((int)fdi)&0xFF;                   // младший байт доплеровского смещения БТ
    int fdi_MSB=((int)fdi/256)&0xFF;               // старший байт доплеровского смещения БТ
    Command5[i][2]=fdi_MSB;                        // записать значение старшего байта, цена младшего разряда 0.5 Гц
    Command5[i][3]=fdi_LSB;                        // записать значение младшего байта, цена младшего разряда 0.5 Гц

    // Command3 "Амплитуда блестящей точки (БТ)" режима Управление
    Command3[i][1]=i+1;                            // записать значение номера БТ
    Command3[i][3]=int(sqrt(EPR));                 // записать значение амплитуды БТ
    // Command4 "Время задержки (БТ)" режима Управление
    Command4[i][1]=i+1;                            // записать значение номера БТ
    Command4[i][2]=Tau_MSB;                        // записать значение старшего байта времени задержки БТ
    Command4[i][3]=Tau_LSB;                        // записать значение младшего байта времени задержки БТ
    // Command5 "Доплеровский сдвиг частоты (БТ)" режима Управление
    Command5[i][1]=i+1;                            // записать значение номера БТ
    D_SignC[i]=CB_SignC->ItemIndex;

    // Com3 "Амплитуда блестящей точки (БТ)" режима Тестирование
    Com3[i][1]=i+1;                                // записать значение номера БТ
    Com3[i][3]=int(sqrt(EPR));                     // записать значение амплитуды БТ
    // Com4 "Время задержки (БТ)" режима Тестирование
    Com4[i][1]=i+1;                                // записать значение номера БТ
    Com4[i][2]=Tau_MSB;                            // записать значение старшего байта времени задержки БТ
    Com4[i][3]=Tau_LSB;                            // записать значение младшего байта времени задержки БТ
    // Com5 "Доплеровский сдвиг частоты (БТ)" режима Тестирование
    Com5[i][1]=i+1;                                // записать значение номера БТ
    Com5[i][2]=fdi_MSB;                            // записать значение старшего байта, цена младшего разряда 0.5 Гц
    Com5[i][3]=fdi_LSB;                            // записать значение младшего байта, цена младшего разряда 0.5 Гц
    D_SignT[i]=CB_SignT->ItemIndex;
  }

  CB_Command3_1->ItemIndex=OldIndex;               // номер БТ по умолчанию при изменении числа БТ
  E_Command3->Text=IntToStr(Command3[OldIndex][3]);                            // показать текущее значение
  E_Command4->Text=IntToStr(Command4[OldIndex][3]+Command4[OldIndex][2]*256);  // показать текущее значение
  E_Command5->Text=IntToStr(Command5[OldIndex][3]+Command5[OldIndex][2]*256);  // показать текущее значение
  if(D_SignC[OldIndex]==0) CB_SignC->ItemIndex=0;
  else                     CB_SignC->ItemIndex=1;


  CB_Com3_1->ItemIndex=OldIndex_;                   // номер БТ по умолчанию при изменении числа БТ
  E_Com3->Text=IntToStr(Com3[OldIndex_][3]);                         // показать текущее значение
  E_Com4->Text=IntToStr(Com4[OldIndex_][3]+Com4[OldIndex_][2]*256);  // показать текущее значение
  E_Com5->Text=IntToStr(Com5[OldIndex_][3]+Com5[OldIndex_][2]*256);  // показать текущее значение
  if(D_SignT[OldIndex_]==0) CB_SignT->ItemIndex=0;
  else                      CB_SignT->ItemIndex=1;
/*
  Коэффициент ослабления передатчика ППРМ-2 режима Управление
  size_t - возвращаемое значение длины строки целочисленного типа без знака функции std::string::size
*/
  if((size_t)LV_Sar2->Items->Count!=0) // если количество строк LV_Sar2 не нулевое
  {
    int K2=StrToInt(LV_Sar2->Items->Item[0]->SubItems->Strings[0].c_str()); // подготовить значение
    CB_Command7->Text=IntToStr(K2);
    Command7[3]=K2;
  }
/*
  Коэффициент ослабления приёмника ППРМ-2 режима Тестирование
  size_t - возвращаемое значение длины строки целочисленного типа без знака функции std::string::size
*/
  if((size_t)LV_Sar2->Items->Count!=0) // если количество строк LV_Sar2 не нулевое
  {
    int K1=StrToInt(LV_Sar2->Items->Item[0]->Caption.c_str()); // подготовить значение
    CB_Com6->Text=IntToStr(K1);
    Com6[3]=K1;
  }
/*
  Коэффициент ослабления передатчика ППРМ-2 режима Тестирование
  size_t - возвращаемое значение длины строки целочисленного типа без знака функции std::string::size
*/
  if((size_t)LV_Sar2->Items->Count!=0) // если количество строк LV_Sar2 не нулевое
  {
    int K2=StrToInt(LV_Sar2->Items->Item[0]->SubItems->Strings[0].c_str()); // подготовить значение
    CB_Com7->Text=IntToStr(K2);
    Com7[3]=K2;
  }
/*
  Частота среза фильтра гетеродина приемника ППРМ-2 режима Тестирование
  size_t - возвращаемое значение длины строки целочисленного типа без знака функции std::string::size
*/
  if((size_t)LV_Sar2->Items->Count!=0) // если количество строк LV_Sar2 не нулевое
  {
    int F1=StrToInt(LV_Sar2->Items->Item[0]->SubItems->Strings[1].c_str()); // подготовить значение
    CB_Com8->Text=IntToStr(F1);

    if(F1==970)  CB_Com8->ItemIndex=0;
    else
    if(F1==1000) CB_Com8->ItemIndex=1;
    else
    if(F1==1030) CB_Com8->ItemIndex=2;
    else
    if(F1==1055) CB_Com8->ItemIndex=3;
    else
    if(F1==1085) CB_Com8->ItemIndex=4;
    else
    if(F1==1120) CB_Com8->ItemIndex=5;
    else
    if(F1==1155) CB_Com8->ItemIndex=6;
    else
    if(F1==1195) CB_Com8->ItemIndex=7;
    else
    if(F1==2335) CB_Com8->ItemIndex=8;
    else
    if(F1==2430) CB_Com8->ItemIndex=9;
    else
    if(F1==2530) CB_Com8->ItemIndex=10;
    else
    if(F1==2655) CB_Com8->ItemIndex=11;
    else
    if(F1==2770) CB_Com8->ItemIndex=12;
    else
    if(F1==2940) CB_Com8->ItemIndex=13;
    else
    if(F1==3145) CB_Com8->ItemIndex=14;
    else
    if(F1==3400) CB_Com8->ItemIndex=15;

    for(int i=0; i<16; i++)
    {
      int code;
      if(CB_Com8->ItemIndex==i) code=14+128*i;    // получение кода параметра
      int code_LSB=code&0xFF;                     // младший байт параметра
      int code_MSB=(code/256)&0xFF;               // старший байт параметра
      Com8[2]=code_MSB;                           // записать значение старшего байта параметра
      Com8[3]=code_LSB;                           // записать значение младшего байта параметра
    }
    //M_Debug->Lines->Add(CB_Com8->ItemIndex);
  }
/*
  Частота среза фильтра гетеродина передатчика ППРМ-2 режима Тестирование
  size_t - возвращаемое значение длины строки целочисленного типа без знака функции std::string::size
*/
  if((size_t)LV_Sar2->Items->Count!=0) // если количество строк LV_Sar2 не нулевое
  {
    int F2=StrToInt(LV_Sar2->Items->Item[0]->SubItems->Strings[2].c_str()); // подготовить значение
    CB_Com9->Text=IntToStr(F2);

    if(F2==970)  CB_Com9->ItemIndex=0;
    else
    if(F2==1000) CB_Com9->ItemIndex=1;
    else
    if(F2==1030) CB_Com9->ItemIndex=2;
    else
    if(F2==1055) CB_Com9->ItemIndex=3;
    else
    if(F2==1085) CB_Com9->ItemIndex=4;
    else
    if(F2==1120) CB_Com9->ItemIndex=5;
    else
    if(F2==1155) CB_Com9->ItemIndex=6;
    else
    if(F2==1195) CB_Com9->ItemIndex=7;
    else
    if(F2==2335) CB_Com9->ItemIndex=8;
    else
    if(F2==2430) CB_Com9->ItemIndex=9;
    else
    if(F2==2530) CB_Com9->ItemIndex=10;
    else
    if(F2==2655) CB_Com9->ItemIndex=11;
    else
    if(F2==2770) CB_Com9->ItemIndex=12;
    else
    if(F2==2940) CB_Com9->ItemIndex=13;
    else
    if(F2==3145) CB_Com9->ItemIndex=14;
    else
    if(F2==3400) CB_Com9->ItemIndex=15;

    for(int i=0; i<16; i++)
    {
      int code;
      if(CB_Com9->ItemIndex==i) code=14+128*i;    // получение кода параметра
      int code_LSB=code&0xFF;                     // младший байт параметра
      int code_MSB=(code/256)&0xFF;               // старший байт параметра
      Com9[2]=code_MSB;                           // записать значение старшего байта параметра
      Com9[3]=code_LSB;                           // записать значение младшего байта параметра
    }
    //M_Debug->Lines->Add(IntToStr(Com9[2]));
    //M_Debug->Lines->Add(IntToStr(Com9[3]));
  }
/*
  Код управления входным преселектором режима Тестирование
  size_t - возвращаемое значение длины строки целочисленного типа без знака функции std::string::size
*/
  if((size_t)LV_Sar2->Items->Count!=0) // если количество строк LV_Sar2 не нулевое
  {
    int K=StrToInt(LV_Sar2->Items->Item[0]->SubItems->Strings[3].c_str()); // подготовить значение
    CB_Com10->Text=IntToStr(K);
    Com10[3]=K;
    //M_Debug->Lines->Add(IntToStr(Com10[3]));
  }
/*
  Код управления выходным преселектором режима Тестирование
  size_t - возвращаемое значение длины строки целочисленного типа без знака функции std::string::size
*/
  if((size_t)LV_Sar2->Items->Count!=0) // если количество строк LV_Sar2 не нулевое
  {
    int K=StrToInt(LV_Sar2->Items->Item[0]->SubItems->Strings[4].c_str()); // подготовить значение
    CB_Com11->Text=IntToStr(K);
    Com11[3]=K;
    //M_Debug->Lines->Add(IntToStr(Com11[3]));
  }
/*
  Команда "Рабочие регистры синтезатора платы ППРМ-2. Пакет 1"
  size_t - возвращаемое значение длины строки целочисленного типа без знака функции std::string::size
*/
  if((size_t)LV_Sar3->Items->Count!=0) // если количество строк LV_Sar3 не нулевое
  {
    Com13[1]=StrToInt(LV_Sar3->Items->Item[0]->Caption.c_str());              // подготовить значение команды
    Com13[2]=StrToInt(LV_Sar3->Items->Item[0]->SubItems->Strings[0].c_str()); // подготовить значение команды
    Com13[3]=StrToInt(LV_Sar3->Items->Item[0]->SubItems->Strings[1].c_str()); // подготовить значение команды

    E_Com13_1->Text=LV_Sar3->Items->Item[0]->Caption.c_str();
    E_Com13_2->Text=LV_Sar3->Items->Item[0]->SubItems->Strings[0].c_str();
    E_Com13_3->Text=LV_Sar3->Items->Item[0]->SubItems->Strings[1].c_str();

    //M_Debug->Lines->Add(IntToStr(Com13[1]));
    //M_Debug->Lines->Add(IntToStr(Com13[2]));
    //M_Debug->Lines->Add(IntToStr(Com13[3]));
  }
/*
  Команда "Рабочие регистры синтезатора платы ППРМ-2. Пакет 2"
  size_t - возвращаемое значение длины строки целочисленного типа без знака функции std::string::size
*/
  if((size_t)LV_Sar3->Items->Count!=0) // если количество строк LV_Sar3 не нулевое
  {
    Com14[1]=StrToInt(LV_Sar3->Items->Item[0]->SubItems->Strings[2].c_str()); // подготовить значение команды
    Com14[2]=StrToInt(LV_Sar3->Items->Item[0]->SubItems->Strings[3].c_str()); // подготовить значение команды
    Com14[3]=StrToInt(LV_Sar3->Items->Item[0]->SubItems->Strings[4].c_str()); // подготовить значение команды

    E_Com14_1->Text=LV_Sar3->Items->Item[0]->SubItems->Strings[2].c_str();
    E_Com14_2->Text=LV_Sar3->Items->Item[0]->SubItems->Strings[3].c_str();
    E_Com14_3->Text=LV_Sar3->Items->Item[0]->SubItems->Strings[4].c_str();
  }
/*
  Команда "Рабочие регистры синтезатора платы ППРМ-2. Пакет 3"
  size_t - возвращаемое значение длины строки целочисленного типа без знака функции std::string::size
*/
  if((size_t)LV_Sar3->Items->Count!=0) // если количество строк LV_Sar3 не нулевое
  {
    Com15[1]=StrToInt(LV_Sar3->Items->Item[0]->SubItems->Strings[5].c_str()); // подготовить значение команды
    Com15[2]=StrToInt(LV_Sar3->Items->Item[0]->SubItems->Strings[6].c_str()); // подготовить значение команды
    Com15[3]=StrToInt(LV_Sar3->Items->Item[0]->SubItems->Strings[7].c_str()); // подготовить значение команды

    E_Com15_1->Text=LV_Sar3->Items->Item[0]->SubItems->Strings[5].c_str();
    E_Com15_2->Text=LV_Sar3->Items->Item[0]->SubItems->Strings[6].c_str();
    E_Com15_3->Text=LV_Sar3->Items->Item[0]->SubItems->Strings[7].c_str();
  }
/*
  Команда "Рабочие регистры синтезатора платы ППРМ-2. Пакет 4"
  size_t - возвращаемое значение длины строки целочисленного типа без знака функции std::string::size
*/
  if((size_t)LV_Sar3->Items->Count!=0) // если количество строк LV_Sar3 не нулевое
  {
    Com16[1]=StrToInt(LV_Sar3->Items->Item[0]->SubItems->Strings[8].c_str());  // подготовить значение команды
    Com16[2]=StrToInt(LV_Sar3->Items->Item[0]->SubItems->Strings[9].c_str());  // подготовить значение команды
    Com16[3]=StrToInt(LV_Sar3->Items->Item[0]->SubItems->Strings[10].c_str()); // подготовить значение команды

    E_Com16_1->Text=LV_Sar3->Items->Item[0]->SubItems->Strings[8].c_str();
    E_Com16_2->Text=LV_Sar3->Items->Item[0]->SubItems->Strings[9].c_str();
    E_Com16_3->Text=LV_Sar3->Items->Item[0]->SubItems->Strings[10].c_str();
  }
/*
  Команда "Рабочие регистры синтезатора платы ППРМ-2. Пакет 5"
  size_t - возвращаемое значение длины строки целочисленного типа без знака функции std::string::size
*/
  if((size_t)LV_Sar4->Items->Count!=0) // если количество строк LV_Sar4 не нулевое
  {
    Com17[1]=StrToInt(LV_Sar4->Items->Item[0]->Caption.c_str());              // подготовить значение команды
    Com17[2]=StrToInt(LV_Sar4->Items->Item[0]->SubItems->Strings[0].c_str()); // подготовить значение команды
    Com17[3]=StrToInt(LV_Sar4->Items->Item[0]->SubItems->Strings[1].c_str()); // подготовить значение команды

    E_Com17_1->Text=LV_Sar4->Items->Item[0]->Caption.c_str();
    E_Com17_2->Text=LV_Sar4->Items->Item[0]->SubItems->Strings[0].c_str();
    E_Com17_3->Text=LV_Sar4->Items->Item[0]->SubItems->Strings[1].c_str();

    //M_Debug->Lines->Add(IntToStr(Com17[1]));
    //M_Debug->Lines->Add(IntToStr(Com17[2]));
    //M_Debug->Lines->Add(IntToStr(Com17[3]));
  }
/*
  Команда "Рабочие регистры синтезатора платы ППРМ-2. Пакет 6"
  size_t - возвращаемое значение длины строки целочисленного типа без знака функции std::string::size
*/
  if((size_t)LV_Sar4->Items->Count!=0) // если количество строк LV_Sar4 не нулевое
  {
    Com18[1]=StrToInt(LV_Sar4->Items->Item[0]->SubItems->Strings[2].c_str()); // подготовить значение команды
    Com18[2]=StrToInt(LV_Sar4->Items->Item[0]->SubItems->Strings[3].c_str()); // подготовить значение команды
    Com18[3]=StrToInt(LV_Sar4->Items->Item[0]->SubItems->Strings[4].c_str()); // подготовить значение команды

    E_Com18_1->Text=LV_Sar4->Items->Item[0]->SubItems->Strings[2].c_str();
    E_Com18_2->Text=LV_Sar4->Items->Item[0]->SubItems->Strings[3].c_str();
    E_Com18_3->Text=LV_Sar4->Items->Item[0]->SubItems->Strings[4].c_str();
  }
/*
  Команда "Рабочие регистры синтезатора платы ППРМ-2. Пакет 7"
  size_t - возвращаемое значение длины строки целочисленного типа без знака функции std::string::size
*/
  if((size_t)LV_Sar4->Items->Count!=0) // если количество строк LV_Sar4 не нулевое
  {
    Com19[1]=StrToInt(LV_Sar4->Items->Item[0]->SubItems->Strings[5].c_str()); // подготовить значение команды
    Com19[2]=StrToInt(LV_Sar4->Items->Item[0]->SubItems->Strings[6].c_str()); // подготовить значение команды
    Com19[3]=StrToInt(LV_Sar4->Items->Item[0]->SubItems->Strings[7].c_str()); // подготовить значение команды

    E_Com19_1->Text=LV_Sar4->Items->Item[0]->SubItems->Strings[5].c_str();
    E_Com19_2->Text=LV_Sar4->Items->Item[0]->SubItems->Strings[6].c_str();
    E_Com19_3->Text=LV_Sar4->Items->Item[0]->SubItems->Strings[7].c_str();
  }
/*
  Команда "Рабочие регистры синтезатора платы ППРМ-2. Пакет 8"
  size_t - возвращаемое значение длины строки целочисленного типа без знака функции std::string::size
*/
  if((size_t)LV_Sar4->Items->Count!=0) // если количество строк LV_Sar4 не нулевое
  {
    Com20[1]=StrToInt(LV_Sar4->Items->Item[0]->SubItems->Strings[8].c_str()); // подготовить значение команды
    Com20[2]=StrToInt(LV_Sar4->Items->Item[0]->SubItems->Strings[9].c_str()); // подготовить значение команды
    Com20[3]=StrToInt(LV_Sar4->Items->Item[0]->SubItems->Strings[10].c_str()); // подготовить значение команды

    E_Com20_1->Text=LV_Sar4->Items->Item[0]->SubItems->Strings[8].c_str();
    E_Com20_2->Text=LV_Sar4->Items->Item[0]->SubItems->Strings[9].c_str();
    E_Com20_3->Text=LV_Sar4->Items->Item[0]->SubItems->Strings[10].c_str();
  }
/*/
  M_Debug->Lines->Clear();
  M_Debug->Lines->Add(IntToStr(Com13[1]));
  M_Debug->Lines->Add(IntToStr(Com13[2]));
  M_Debug->Lines->Add(IntToStr(Com13[3]));

  M_Debug->Lines->Add(IntToStr(Com14[1]));
  M_Debug->Lines->Add(IntToStr(Com14[2]));
  M_Debug->Lines->Add(IntToStr(Com14[3]));

  M_Debug->Lines->Add(IntToStr(Com15[1]));
  M_Debug->Lines->Add(IntToStr(Com15[2]));
  M_Debug->Lines->Add(IntToStr(Com15[3]));

  M_Debug->Lines->Add(IntToStr(Com16[1]));
  M_Debug->Lines->Add(IntToStr(Com16[2]));
  M_Debug->Lines->Add(IntToStr(Com16[3]));

  M_Debug->Lines->Add(IntToStr(Com17[1]));
  M_Debug->Lines->Add(IntToStr(Com17[2]));
  M_Debug->Lines->Add(IntToStr(Com17[3]));

  M_Debug->Lines->Add(IntToStr(Com18[1]));
  M_Debug->Lines->Add(IntToStr(Com18[2]));
  M_Debug->Lines->Add(IntToStr(Com18[3]));

  M_Debug->Lines->Add(IntToStr(Com19[1]));
  M_Debug->Lines->Add(IntToStr(Com19[2]));
  M_Debug->Lines->Add(IntToStr(Com19[3]));

  M_Debug->Lines->Add(IntToStr(Com20[1]));
  M_Debug->Lines->Add(IntToStr(Com20[2]));
  M_Debug->Lines->Add(IntToStr(Com20[3]));
*/
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::E_Command5KeyPress(TObject *Sender, wchar_t &Key)
// запрет введения любых символов, кроме чисел 0...9 и десятичной запятой
{
  Set<char,0,255>Dig;
  Dig<<'0'<<'1'<<'2'<<'3'<<'4'<<'5'<<'6'<<'7'<<'8'<<'9'<<','<<8;
  if(!Dig.Contains(Key))
  {
	Key=0;
	return;
  }
}
//---------------------------------------------------------------------------


